(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["chunks/ssr/node_modules_next_dist_compiled_react-server-dom-webpack_4fc5da._.js", {

"[project]/node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.edge.development.js (ecmascript, ssr)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, k: __turbopack_refresh__, m: module, e: exports }) { !function() {

'use strict';
if ("TURBOPACK compile-time truthy", 1) {
    (function() {
        'use strict';
        var ReactDOM = __turbopack_require__("[project]/node_modules/next/dist/compiled/react-dom/server-rendering-stub.js (ecmascript, ssr)");
        var React = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/index.js (ecmascript, ssr)");
        var enableBinaryFlight = false;
        function createStringDecoder() {
            return new TextDecoder();
        }
        var decoderOptions = {
            stream: true
        };
        function readPartialStringChunk(decoder, buffer) {
            return decoder.decode(buffer, decoderOptions);
        }
        function readFinalStringChunk(decoder, buffer) {
            return decoder.decode(buffer);
        }
        function resolveClientReference(bundlerConfig, metadata) {
            if (bundlerConfig) {
                var moduleExports = bundlerConfig[metadata.id];
                var resolvedModuleData = moduleExports[metadata.name];
                var name;
                if (resolvedModuleData) {
                    name = resolvedModuleData.name;
                } else {
                    resolvedModuleData = moduleExports['*'];
                    if (!resolvedModuleData) {
                        throw new Error('Could not find the module "' + metadata.id + '" in the React SSR Manifest. ' + 'This is probably a bug in the React Server Components bundler.');
                    }
                    name = metadata.name;
                }
                return {
                    id: resolvedModuleData.id,
                    chunks: resolvedModuleData.chunks,
                    name: name,
                    async: !!metadata.async
                };
            }
            return metadata;
        }
        var chunkCache = new Map();
        function requireAsyncModule(id) {
            var promise = globalThis.__next_require__(id);
            if (typeof promise.then !== 'function') {
                return null;
            } else if (promise.status === 'fulfilled') {
                return null;
            } else {
                promise.then(function(value) {
                    var fulfilledThenable = promise;
                    fulfilledThenable.status = 'fulfilled';
                    fulfilledThenable.value = value;
                }, function(reason) {
                    var rejectedThenable = promise;
                    rejectedThenable.status = 'rejected';
                    rejectedThenable.reason = reason;
                });
                return promise;
            }
        }
        function ignoreReject() {}
        function preloadModule(metadata) {
            var chunks = metadata.chunks;
            var promises = [];
            for(var i = 0; i < chunks.length; i++){
                var chunkId = chunks[i];
                var entry = chunkCache.get(chunkId);
                if (entry === undefined) {
                    var thenable = globalThis.__next_chunk_load__(chunkId);
                    promises.push(thenable);
                    var resolve = chunkCache.set.bind(chunkCache, chunkId, null);
                    thenable.then(resolve, ignoreReject);
                    chunkCache.set(chunkId, thenable);
                } else if (entry !== null) {
                    promises.push(entry);
                }
            }
            if (metadata.async) {
                if (promises.length === 0) {
                    return requireAsyncModule(metadata.id);
                } else {
                    return Promise.all(promises).then(function() {
                        return requireAsyncModule(metadata.id);
                    });
                }
            } else if (promises.length > 0) {
                return Promise.all(promises);
            } else {
                return null;
            }
        }
        function requireModule(metadata) {
            var moduleExports = globalThis.__next_require__(metadata.id);
            if (metadata.async) {
                if (typeof moduleExports.then !== 'function') ;
                else if (moduleExports.status === 'fulfilled') {
                    moduleExports = moduleExports.value;
                } else {
                    throw moduleExports.reason;
                }
            }
            if (metadata.name === '*') {
                return moduleExports;
            }
            if (metadata.name === '') {
                return moduleExports.__esModule ? moduleExports.default : moduleExports;
            }
            return moduleExports[metadata.name];
        }
        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;
        function dispatchHint(code, model) {
            var dispatcher = ReactDOMCurrentDispatcher.current;
            if (dispatcher) {
                var href, options;
                if (typeof model === 'string') {
                    href = model;
                } else {
                    href = model[0];
                    options = model[1];
                }
                switch(code){
                    case 'D':
                        {
                            dispatcher.prefetchDNS(href, options);
                            return;
                        }
                    case 'C':
                        {
                            dispatcher.preconnect(href, options);
                            return;
                        }
                    case 'L':
                        {
                            dispatcher.preload(href, options);
                            return;
                        }
                    case 'I':
                        {
                            dispatcher.preinit(href, options);
                            return;
                        }
                }
            }
        }
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
            {
                {
                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                        args[_key2 - 1] = arguments[_key2];
                    }
                    printWarning('error', format, args);
                }
            }
        }
        function printWarning(level, format, args) {
            {
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();
                if (stack !== '') {
                    format += '%s';
                    args = args.concat([
                        stack
                    ]);
                }
                var argsWithFormat = args.map(function(item) {
                    return String(item);
                });
                argsWithFormat.unshift('Warning: ' + format);
                Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
        }
        var REACT_ELEMENT_TYPE = Symbol.for('react.element');
        var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
        var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
        var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
        var REACT_MEMO_TYPE = Symbol.for('react.memo');
        var REACT_LAZY_TYPE = Symbol.for('react.lazy');
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for('react.default_value');
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === 'function') {
                return maybeIterator;
            }
            return null;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
            return isArrayImpl(a);
        }
        var jsxPropsParents = new WeakMap();
        var jsxChildrenParents = new WeakMap();
        function isObjectPrototype(object) {
            if (!object) {
                return false;
            }
            var ObjectPrototype = Object.prototype;
            if (object === ObjectPrototype) {
                return true;
            }
            if (Object.getPrototypeOf(object)) {
                return false;
            }
            var names = Object.getOwnPropertyNames(object);
            for(var i = 0; i < names.length; i++){
                if (!(names[i] in ObjectPrototype)) {
                    return false;
                }
            }
            return true;
        }
        function isSimpleObject(object) {
            if (!isObjectPrototype(Object.getPrototypeOf(object))) {
                return false;
            }
            var names = Object.getOwnPropertyNames(object);
            for(var i = 0; i < names.length; i++){
                var descriptor = Object.getOwnPropertyDescriptor(object, names[i]);
                if (!descriptor) {
                    return false;
                }
                if (!descriptor.enumerable) {
                    if ((names[i] === 'key' || names[i] === 'ref') && typeof descriptor.get === 'function') {
                        continue;
                    }
                    return false;
                }
            }
            return true;
        }
        function objectName(object) {
            var name = Object.prototype.toString.call(object);
            return name.replace(/^\[object (.*)\]$/, function(m, p0) {
                return p0;
            });
        }
        function describeKeyForErrorMessage(key) {
            var encodedKey = JSON.stringify(key);
            return '"' + key + '"' === encodedKey ? key : encodedKey;
        }
        function describeValueForErrorMessage(value) {
            switch(typeof value){
                case 'string':
                    {
                        return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + '...');
                    }
                case 'object':
                    {
                        if (isArray(value)) {
                            return '[...]';
                        }
                        var name = objectName(value);
                        if (name === 'Object') {
                            return '{...}';
                        }
                        return name;
                    }
                case 'function':
                    return 'function';
                default:
                    return String(value);
            }
        }
        function describeElementType(type) {
            if (typeof type === 'string') {
                return type;
            }
            switch(type){
                case REACT_SUSPENSE_TYPE:
                    return 'Suspense';
                case REACT_SUSPENSE_LIST_TYPE:
                    return 'SuspenseList';
            }
            if (typeof type === 'object') {
                switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                        return describeElementType(type.render);
                    case REACT_MEMO_TYPE:
                        return describeElementType(type.type);
                    case REACT_LAZY_TYPE:
                        {
                            var lazyComponent = type;
                            var payload = lazyComponent._payload;
                            var init = lazyComponent._init;
                            try {
                                return describeElementType(init(payload));
                            } catch (x) {}
                        }
                }
            }
            return '';
        }
        function describeObjectForErrorMessage(objectOrArray, expandedName) {
            var objKind = objectName(objectOrArray);
            if (objKind !== 'Object' && objKind !== 'Array') {
                return objKind;
            }
            var str = '';
            var start = -1;
            var length = 0;
            if (isArray(objectOrArray)) {
                if (jsxChildrenParents.has(objectOrArray)) {
                    var type = jsxChildrenParents.get(objectOrArray);
                    str = '<' + describeElementType(type) + '>';
                    var array = objectOrArray;
                    for(var i = 0; i < array.length; i++){
                        var value = array[i];
                        var substr = void 0;
                        if (typeof value === 'string') {
                            substr = value;
                        } else if (typeof value === 'object' && value !== null) {
                            substr = '{' + describeObjectForErrorMessage(value) + '}';
                        } else {
                            substr = '{' + describeValueForErrorMessage(value) + '}';
                        }
                        if ('' + i === expandedName) {
                            start = str.length;
                            length = substr.length;
                            str += substr;
                        } else if (substr.length < 15 && str.length + substr.length < 40) {
                            str += substr;
                        } else {
                            str += '{...}';
                        }
                    }
                    str += '</' + describeElementType(type) + '>';
                } else {
                    str = '[';
                    var _array = objectOrArray;
                    for(var _i = 0; _i < _array.length; _i++){
                        if (_i > 0) {
                            str += ', ';
                        }
                        var _value = _array[_i];
                        var _substr = void 0;
                        if (typeof _value === 'object' && _value !== null) {
                            _substr = describeObjectForErrorMessage(_value);
                        } else {
                            _substr = describeValueForErrorMessage(_value);
                        }
                        if ('' + _i === expandedName) {
                            start = str.length;
                            length = _substr.length;
                            str += _substr;
                        } else if (_substr.length < 10 && str.length + _substr.length < 40) {
                            str += _substr;
                        } else {
                            str += '...';
                        }
                    }
                    str += ']';
                }
            } else {
                if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {
                    str = '<' + describeElementType(objectOrArray.type) + '/>';
                } else if (jsxPropsParents.has(objectOrArray)) {
                    var _type = jsxPropsParents.get(objectOrArray);
                    str = '<' + (describeElementType(_type) || '...');
                    var object = objectOrArray;
                    var names = Object.keys(object);
                    for(var _i2 = 0; _i2 < names.length; _i2++){
                        str += ' ';
                        var name = names[_i2];
                        str += describeKeyForErrorMessage(name) + '=';
                        var _value2 = object[name];
                        var _substr2 = void 0;
                        if (name === expandedName && typeof _value2 === 'object' && _value2 !== null) {
                            _substr2 = describeObjectForErrorMessage(_value2);
                        } else {
                            _substr2 = describeValueForErrorMessage(_value2);
                        }
                        if (typeof _value2 !== 'string') {
                            _substr2 = '{' + _substr2 + '}';
                        }
                        if (name === expandedName) {
                            start = str.length;
                            length = _substr2.length;
                            str += _substr2;
                        } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {
                            str += _substr2;
                        } else {
                            str += '...';
                        }
                    }
                    str += '>';
                } else {
                    str = '{';
                    var _object = objectOrArray;
                    var _names = Object.keys(_object);
                    for(var _i3 = 0; _i3 < _names.length; _i3++){
                        if (_i3 > 0) {
                            str += ', ';
                        }
                        var _name = _names[_i3];
                        str += describeKeyForErrorMessage(_name) + ': ';
                        var _value3 = _object[_name];
                        var _substr3 = void 0;
                        if (typeof _value3 === 'object' && _value3 !== null) {
                            _substr3 = describeObjectForErrorMessage(_value3);
                        } else {
                            _substr3 = describeValueForErrorMessage(_value3);
                        }
                        if (_name === expandedName) {
                            start = str.length;
                            length = _substr3.length;
                            str += _substr3;
                        } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {
                            str += _substr3;
                        } else {
                            str += '...';
                        }
                    }
                    str += '}';
                }
            }
            if (expandedName === undefined) {
                return str;
            }
            if (start > -1 && length > 0) {
                var highlight = ' '.repeat(start) + '^'.repeat(length);
                return '\n  ' + str + '\n  ' + highlight;
            }
            return '\n  ' + str;
        }
        var knownServerReferences = new WeakMap();
        function serializePromiseID(id) {
            return '$@' + id.toString(16);
        }
        function serializeServerReferenceID(id) {
            return '$F' + id.toString(16);
        }
        function serializeSymbolReference(name) {
            return '$S' + name;
        }
        function serializeFormDataReference(id) {
            return '$K' + id.toString(16);
        }
        function serializeNumber(number) {
            if (Number.isFinite(number)) {
                if (number === 0 && 1 / number === -Infinity) {
                    return '$-0';
                } else {
                    return number;
                }
            } else {
                if (number === Infinity) {
                    return '$Infinity';
                } else if (number === -Infinity) {
                    return '$-Infinity';
                } else {
                    return '$NaN';
                }
            }
        }
        function serializeUndefined() {
            return '$undefined';
        }
        function serializeDateFromDateJSON(dateJSON) {
            return '$D' + dateJSON;
        }
        function serializeBigInt(n) {
            return '$n' + n.toString(10);
        }
        function serializeMapID(id) {
            return '$Q' + id.toString(16);
        }
        function serializeSetID(id) {
            return '$W' + id.toString(16);
        }
        function escapeStringValue(value) {
            if (value[0] === '$') {
                return '$' + value;
            } else {
                return value;
            }
        }
        function processReply(root, formFieldPrefix, resolve, reject) {
            var nextPartId = 1;
            var pendingParts = 0;
            var formData = null;
            function resolveToJSON(key, value) {
                var parent = this;
                {
                    var originalValue = parent[key];
                    if (typeof originalValue === 'object' && originalValue !== value && !(originalValue instanceof Date)) {
                        if (objectName(originalValue) !== 'Object') {
                            error('Only plain objects can be passed to Server Functions from the Client. ' + '%s objects are not supported.%s', objectName(originalValue), describeObjectForErrorMessage(parent, key));
                        } else {
                            error('Only plain objects can be passed to Server Functions from the Client. ' + 'Objects with toJSON methods are not supported. Convert it manually ' + 'to a simple value before passing it to props.%s', describeObjectForErrorMessage(parent, key));
                        }
                    }
                }
                if (value === null) {
                    return null;
                }
                if (typeof value === 'object') {
                    if (typeof value.then === 'function') {
                        if (formData === null) {
                            formData = new FormData();
                        }
                        pendingParts++;
                        var promiseId = nextPartId++;
                        var thenable = value;
                        thenable.then(function(partValue) {
                            var partJSON = JSON.stringify(partValue, resolveToJSON);
                            var data = formData;
                            data.append(formFieldPrefix + promiseId, partJSON);
                            pendingParts--;
                            if (pendingParts === 0) {
                                resolve(data);
                            }
                        }, function(reason) {
                            reject(reason);
                        });
                        return serializePromiseID(promiseId);
                    }
                    if (value instanceof FormData) {
                        if (formData === null) {
                            formData = new FormData();
                        }
                        var data = formData;
                        var refId = nextPartId++;
                        var prefix = formFieldPrefix + refId + '_';
                        value.forEach(function(originalValue, originalKey) {
                            data.append(prefix + originalKey, originalValue);
                        });
                        return serializeFormDataReference(refId);
                    }
                    if (value instanceof Map) {
                        var partJSON = JSON.stringify(Array.from(value), resolveToJSON);
                        if (formData === null) {
                            formData = new FormData();
                        }
                        var mapId = nextPartId++;
                        formData.append(formFieldPrefix + mapId, partJSON);
                        return serializeMapID(mapId);
                    }
                    if (value instanceof Set) {
                        var _partJSON = JSON.stringify(Array.from(value), resolveToJSON);
                        if (formData === null) {
                            formData = new FormData();
                        }
                        var setId = nextPartId++;
                        formData.append(formFieldPrefix + setId, _partJSON);
                        return serializeSetID(setId);
                    }
                    if (!isArray(value)) {
                        var iteratorFn = getIteratorFn(value);
                        if (iteratorFn) {
                            return Array.from(value);
                        }
                    }
                    {
                        if (value !== null && !isArray(value)) {
                            if (value.$$typeof === REACT_ELEMENT_TYPE) {
                                error('React Element cannot be passed to Server Functions from the Client.%s', describeObjectForErrorMessage(parent, key));
                            } else if (value.$$typeof === REACT_LAZY_TYPE) {
                                error('React Lazy cannot be passed to Server Functions from the Client.%s', describeObjectForErrorMessage(parent, key));
                            } else if (value.$$typeof === REACT_PROVIDER_TYPE) {
                                error('React Context Providers cannot be passed to Server Functions from the Client.%s', describeObjectForErrorMessage(parent, key));
                            } else if (objectName(value) !== 'Object') {
                                error('Only plain objects can be passed to Client Components from Server Components. ' + '%s objects are not supported.%s', objectName(value), describeObjectForErrorMessage(parent, key));
                            } else if (!isSimpleObject(value)) {
                                error('Only plain objects can be passed to Client Components from Server Components. ' + 'Classes or other objects with methods are not supported.%s', describeObjectForErrorMessage(parent, key));
                            } else if (Object.getOwnPropertySymbols) {
                                var symbols = Object.getOwnPropertySymbols(value);
                                if (symbols.length > 0) {
                                    error('Only plain objects can be passed to Client Components from Server Components. ' + 'Objects with symbol properties like %s are not supported.%s', symbols[0].description, describeObjectForErrorMessage(parent, key));
                                }
                            }
                        }
                    }
                    return value;
                }
                if (typeof value === 'string') {
                    if (value[value.length - 1] === 'Z') {
                        var _originalValue = parent[key];
                        if (_originalValue instanceof Date) {
                            return serializeDateFromDateJSON(value);
                        }
                    }
                    return escapeStringValue(value);
                }
                if (typeof value === 'boolean') {
                    return value;
                }
                if (typeof value === 'number') {
                    return serializeNumber(value);
                }
                if (typeof value === 'undefined') {
                    return serializeUndefined();
                }
                if (typeof value === 'function') {
                    var metaData = knownServerReferences.get(value);
                    if (metaData !== undefined) {
                        var metaDataJSON = JSON.stringify(metaData, resolveToJSON);
                        if (formData === null) {
                            formData = new FormData();
                        }
                        var _refId = nextPartId++;
                        formData.set(formFieldPrefix + _refId, metaDataJSON);
                        return serializeServerReferenceID(_refId);
                    }
                    throw new Error('Client Functions cannot be passed directly to Server Functions. ' + 'Only Functions passed from the Server can be passed back again.');
                }
                if (typeof value === 'symbol') {
                    var name = value.description;
                    if (Symbol.for(name) !== value) {
                        throw new Error('Only global symbols received from Symbol.for(...) can be passed to Server Functions. ' + ("The symbol Symbol.for(" + value.description + ") cannot be found among global symbols."));
                    }
                    return serializeSymbolReference(name);
                }
                if (typeof value === 'bigint') {
                    return serializeBigInt(value);
                }
                throw new Error("Type " + typeof value + " is not supported as an argument to a Server Function.");
            }
            var json = JSON.stringify(root, resolveToJSON);
            if (formData === null) {
                resolve(json);
            } else {
                formData.set(formFieldPrefix + '0', json);
                if (pendingParts === 0) {
                    resolve(formData);
                }
            }
        }
        var boundCache = new WeakMap();
        function encodeFormData(reference) {
            var resolve, reject;
            var thenable = new Promise(function(res, rej) {
                resolve = res;
                reject = rej;
            });
            processReply(reference, '', function(body) {
                if (typeof body === 'string') {
                    var data = new FormData();
                    data.append('0', body);
                    body = data;
                }
                var fulfilled = thenable;
                fulfilled.status = 'fulfilled';
                fulfilled.value = body;
                resolve(body);
            }, function(e) {
                var rejected = thenable;
                rejected.status = 'rejected';
                rejected.reason = e;
                reject(e);
            });
            return thenable;
        }
        function encodeFormAction(identifierPrefix) {
            var reference = knownServerReferences.get(this);
            if (!reference) {
                throw new Error('Tried to encode a Server Action from a different instance than the encoder is from. ' + 'This is a bug in React.');
            }
            var data = null;
            var name;
            var boundPromise = reference.bound;
            if (boundPromise !== null) {
                var thenable = boundCache.get(reference);
                if (!thenable) {
                    thenable = encodeFormData(reference);
                    boundCache.set(reference, thenable);
                }
                if (thenable.status === 'rejected') {
                    throw thenable.reason;
                } else if (thenable.status !== 'fulfilled') {
                    throw thenable;
                }
                var encodedFormData = thenable.value;
                var prefixedData = new FormData();
                encodedFormData.forEach(function(value, key) {
                    prefixedData.append('$ACTION_' + identifierPrefix + ':' + key, value);
                });
                data = prefixedData;
                name = '$ACTION_REF_' + identifierPrefix;
            } else {
                name = '$ACTION_ID_' + reference.id;
            }
            return {
                name: name,
                method: 'POST',
                encType: 'multipart/form-data',
                data: data
            };
        }
        function createServerReference$1(id, callServer) {
            var proxy = function() {
                var args = Array.prototype.slice.call(arguments);
                return callServer(id, args);
            };
            {
                proxy.$$FORM_ACTION = encodeFormAction;
            }
            knownServerReferences.set(proxy, {
                id: id,
                bound: null
            });
            return proxy;
        }
        var ContextRegistry = ReactSharedInternals.ContextRegistry;
        function getOrCreateServerContext(globalName) {
            if (!ContextRegistry[globalName]) {
                ContextRegistry[globalName] = React.createServerContext(globalName, REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED);
            }
            return ContextRegistry[globalName];
        }
        var ROW_ID = 0;
        var ROW_TAG = 1;
        var ROW_LENGTH = 2;
        var ROW_CHUNK_BY_NEWLINE = 3;
        var ROW_CHUNK_BY_LENGTH = 4;
        var PENDING = 'pending';
        var BLOCKED = 'blocked';
        var RESOLVED_MODEL = 'resolved_model';
        var RESOLVED_MODULE = 'resolved_module';
        var INITIALIZED = 'fulfilled';
        var ERRORED = 'rejected';
        function Chunk(status, value, reason, response) {
            this.status = status;
            this.value = value;
            this.reason = reason;
            this._response = response;
        }
        Chunk.prototype = Object.create(Promise.prototype);
        Chunk.prototype.then = function(resolve, reject) {
            var chunk = this;
            switch(chunk.status){
                case RESOLVED_MODEL:
                    initializeModelChunk(chunk);
                    break;
                case RESOLVED_MODULE:
                    initializeModuleChunk(chunk);
                    break;
            }
            switch(chunk.status){
                case INITIALIZED:
                    resolve(chunk.value);
                    break;
                case PENDING:
                case BLOCKED:
                    if (resolve) {
                        if (chunk.value === null) {
                            chunk.value = [];
                        }
                        chunk.value.push(resolve);
                    }
                    if (reject) {
                        if (chunk.reason === null) {
                            chunk.reason = [];
                        }
                        chunk.reason.push(reject);
                    }
                    break;
                default:
                    reject(chunk.reason);
                    break;
            }
        };
        function readChunk(chunk) {
            switch(chunk.status){
                case RESOLVED_MODEL:
                    initializeModelChunk(chunk);
                    break;
                case RESOLVED_MODULE:
                    initializeModuleChunk(chunk);
                    break;
            }
            switch(chunk.status){
                case INITIALIZED:
                    return chunk.value;
                case PENDING:
                case BLOCKED:
                    throw chunk;
                default:
                    throw chunk.reason;
            }
        }
        function getRoot(response) {
            var chunk = getChunk(response, 0);
            return chunk;
        }
        function createPendingChunk(response) {
            return new Chunk(PENDING, null, null, response);
        }
        function createBlockedChunk(response) {
            return new Chunk(BLOCKED, null, null, response);
        }
        function createErrorChunk(response, error) {
            return new Chunk(ERRORED, null, error, response);
        }
        function wakeChunk(listeners, value) {
            for(var i = 0; i < listeners.length; i++){
                var listener = listeners[i];
                listener(value);
            }
        }
        function wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners) {
            switch(chunk.status){
                case INITIALIZED:
                    wakeChunk(resolveListeners, chunk.value);
                    break;
                case PENDING:
                case BLOCKED:
                    chunk.value = resolveListeners;
                    chunk.reason = rejectListeners;
                    break;
                case ERRORED:
                    if (rejectListeners) {
                        wakeChunk(rejectListeners, chunk.reason);
                    }
                    break;
            }
        }
        function triggerErrorOnChunk(chunk, error) {
            if (chunk.status !== PENDING && chunk.status !== BLOCKED) {
                return;
            }
            var listeners = chunk.reason;
            var erroredChunk = chunk;
            erroredChunk.status = ERRORED;
            erroredChunk.reason = error;
            if (listeners !== null) {
                wakeChunk(listeners, error);
            }
        }
        function createResolvedModelChunk(response, value) {
            return new Chunk(RESOLVED_MODEL, value, null, response);
        }
        function createResolvedModuleChunk(response, value) {
            return new Chunk(RESOLVED_MODULE, value, null, response);
        }
        function createInitializedTextChunk(response, value) {
            return new Chunk(INITIALIZED, value, null, response);
        }
        function resolveModelChunk(chunk, value) {
            if (chunk.status !== PENDING) {
                return;
            }
            var resolveListeners = chunk.value;
            var rejectListeners = chunk.reason;
            var resolvedChunk = chunk;
            resolvedChunk.status = RESOLVED_MODEL;
            resolvedChunk.value = value;
            if (resolveListeners !== null) {
                initializeModelChunk(resolvedChunk);
                wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);
            }
        }
        function resolveModuleChunk(chunk, value) {
            if (chunk.status !== PENDING && chunk.status !== BLOCKED) {
                return;
            }
            var resolveListeners = chunk.value;
            var rejectListeners = chunk.reason;
            var resolvedChunk = chunk;
            resolvedChunk.status = RESOLVED_MODULE;
            resolvedChunk.value = value;
            if (resolveListeners !== null) {
                initializeModuleChunk(resolvedChunk);
                wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);
            }
        }
        var initializingChunk = null;
        var initializingChunkBlockedModel = null;
        function initializeModelChunk(chunk) {
            var prevChunk = initializingChunk;
            var prevBlocked = initializingChunkBlockedModel;
            initializingChunk = chunk;
            initializingChunkBlockedModel = null;
            try {
                var value = parseModel(chunk._response, chunk.value);
                if (initializingChunkBlockedModel !== null && initializingChunkBlockedModel.deps > 0) {
                    initializingChunkBlockedModel.value = value;
                    var blockedChunk = chunk;
                    blockedChunk.status = BLOCKED;
                    blockedChunk.value = null;
                    blockedChunk.reason = null;
                } else {
                    var initializedChunk = chunk;
                    initializedChunk.status = INITIALIZED;
                    initializedChunk.value = value;
                }
            } catch (error) {
                var erroredChunk = chunk;
                erroredChunk.status = ERRORED;
                erroredChunk.reason = error;
            } finally{
                initializingChunk = prevChunk;
                initializingChunkBlockedModel = prevBlocked;
            }
        }
        function initializeModuleChunk(chunk) {
            try {
                var value = requireModule(chunk.value);
                var initializedChunk = chunk;
                initializedChunk.status = INITIALIZED;
                initializedChunk.value = value;
            } catch (error) {
                var erroredChunk = chunk;
                erroredChunk.status = ERRORED;
                erroredChunk.reason = error;
            }
        }
        function reportGlobalError(response, error) {
            response._chunks.forEach(function(chunk) {
                if (chunk.status === PENDING) {
                    triggerErrorOnChunk(chunk, error);
                }
            });
        }
        function createElement(type, key, props) {
            var element = {
                $$typeof: REACT_ELEMENT_TYPE,
                type: type,
                key: key,
                ref: null,
                props: props,
                _owner: null
            };
            {
                element._store = {};
                Object.defineProperty(element._store, 'validated', {
                    configurable: false,
                    enumerable: false,
                    writable: true,
                    value: true
                });
                Object.defineProperty(element, '_self', {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: null
                });
                Object.defineProperty(element, '_source', {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: null
                });
            }
            return element;
        }
        function createLazyChunkWrapper(chunk) {
            var lazyType = {
                $$typeof: REACT_LAZY_TYPE,
                _payload: chunk,
                _init: readChunk
            };
            return lazyType;
        }
        function getChunk(response, id) {
            var chunks = response._chunks;
            var chunk = chunks.get(id);
            if (!chunk) {
                chunk = createPendingChunk(response);
                chunks.set(id, chunk);
            }
            return chunk;
        }
        function createModelResolver(chunk, parentObject, key) {
            var blocked;
            if (initializingChunkBlockedModel) {
                blocked = initializingChunkBlockedModel;
                blocked.deps++;
            } else {
                blocked = initializingChunkBlockedModel = {
                    deps: 1,
                    value: null
                };
            }
            return function(value) {
                parentObject[key] = value;
                blocked.deps--;
                if (blocked.deps === 0) {
                    if (chunk.status !== BLOCKED) {
                        return;
                    }
                    var resolveListeners = chunk.value;
                    var initializedChunk = chunk;
                    initializedChunk.status = INITIALIZED;
                    initializedChunk.value = blocked.value;
                    if (resolveListeners !== null) {
                        wakeChunk(resolveListeners, blocked.value);
                    }
                }
            };
        }
        function createModelReject(chunk) {
            return function(error) {
                return triggerErrorOnChunk(chunk, error);
            };
        }
        function createServerReferenceProxy(response, metaData) {
            var callServer = response._callServer;
            var proxy = function() {
                var args = Array.prototype.slice.call(arguments);
                var p = metaData.bound;
                if (!p) {
                    return callServer(metaData.id, args);
                }
                if (p.status === INITIALIZED) {
                    var bound = p.value;
                    return callServer(metaData.id, bound.concat(args));
                }
                return Promise.resolve(p).then(function(bound) {
                    return callServer(metaData.id, bound.concat(args));
                });
            };
            {
                proxy.$$FORM_ACTION = encodeFormAction;
            }
            knownServerReferences.set(proxy, metaData);
            return proxy;
        }
        function getOutlinedModel(response, id) {
            var chunk = getChunk(response, id);
            switch(chunk.status){
                case RESOLVED_MODEL:
                    initializeModelChunk(chunk);
                    break;
            }
            switch(chunk.status){
                case INITIALIZED:
                    {
                        return chunk.value;
                    }
                default:
                    throw chunk.reason;
            }
        }
        function parseModelString(response, parentObject, key, value) {
            if (value[0] === '$') {
                if (value === '$') {
                    return REACT_ELEMENT_TYPE;
                }
                switch(value[1]){
                    case '$':
                        {
                            return value.slice(1);
                        }
                    case 'L':
                        {
                            var id = parseInt(value.slice(2), 16);
                            var chunk = getChunk(response, id);
                            return createLazyChunkWrapper(chunk);
                        }
                    case '@':
                        {
                            var _id = parseInt(value.slice(2), 16);
                            var _chunk = getChunk(response, _id);
                            return _chunk;
                        }
                    case 'S':
                        {
                            return Symbol.for(value.slice(2));
                        }
                    case 'P':
                        {
                            return getOrCreateServerContext(value.slice(2)).Provider;
                        }
                    case 'F':
                        {
                            var _id2 = parseInt(value.slice(2), 16);
                            var metadata = getOutlinedModel(response, _id2);
                            return createServerReferenceProxy(response, metadata);
                        }
                    case 'Q':
                        {
                            var _id3 = parseInt(value.slice(2), 16);
                            var data = getOutlinedModel(response, _id3);
                            return new Map(data);
                        }
                    case 'W':
                        {
                            var _id4 = parseInt(value.slice(2), 16);
                            var _data = getOutlinedModel(response, _id4);
                            return new Set(_data);
                        }
                    case 'I':
                        {
                            return Infinity;
                        }
                    case '-':
                        {
                            if (value === '$-0') {
                                return -0;
                            } else {
                                return -Infinity;
                            }
                        }
                    case 'N':
                        {
                            return NaN;
                        }
                    case 'u':
                        {
                            return undefined;
                        }
                    case 'D':
                        {
                            return new Date(Date.parse(value.slice(2)));
                        }
                    case 'n':
                        {
                            return BigInt(value.slice(2));
                        }
                    default:
                        {
                            var _id5 = parseInt(value.slice(1), 16);
                            var _chunk2 = getChunk(response, _id5);
                            switch(_chunk2.status){
                                case RESOLVED_MODEL:
                                    initializeModelChunk(_chunk2);
                                    break;
                                case RESOLVED_MODULE:
                                    initializeModuleChunk(_chunk2);
                                    break;
                            }
                            switch(_chunk2.status){
                                case INITIALIZED:
                                    return _chunk2.value;
                                case PENDING:
                                case BLOCKED:
                                    var parentChunk = initializingChunk;
                                    _chunk2.then(createModelResolver(parentChunk, parentObject, key), createModelReject(parentChunk));
                                    return null;
                                default:
                                    throw _chunk2.reason;
                            }
                        }
                }
            }
            return value;
        }
        function parseModelTuple(response, value) {
            var tuple = value;
            if (tuple[0] === REACT_ELEMENT_TYPE) {
                return createElement(tuple[1], tuple[2], tuple[3]);
            }
            return value;
        }
        function missingCall() {
            throw new Error('Trying to call a function from "use server" but the callServer option ' + 'was not implemented in your router runtime.');
        }
        function createResponse(bundlerConfig, callServer) {
            var chunks = new Map();
            var response = {
                _bundlerConfig: bundlerConfig,
                _callServer: callServer !== undefined ? callServer : missingCall,
                _chunks: chunks,
                _stringDecoder: createStringDecoder(),
                _fromJSON: null,
                _rowState: 0,
                _rowID: 0,
                _rowTag: 0,
                _rowLength: 0,
                _buffer: []
            };
            response._fromJSON = createFromJSONCallback(response);
            return response;
        }
        function resolveModel(response, id, model) {
            var chunks = response._chunks;
            var chunk = chunks.get(id);
            if (!chunk) {
                chunks.set(id, createResolvedModelChunk(response, model));
            } else {
                resolveModelChunk(chunk, model);
            }
        }
        function resolveText(response, id, text) {
            var chunks = response._chunks;
            chunks.set(id, createInitializedTextChunk(response, text));
        }
        function resolveModule(response, id, model) {
            var chunks = response._chunks;
            var chunk = chunks.get(id);
            var clientReferenceMetadata = parseModel(response, model);
            var clientReference = resolveClientReference(response._bundlerConfig, clientReferenceMetadata);
            var promise = preloadModule(clientReference);
            if (promise) {
                var blockedChunk;
                if (!chunk) {
                    blockedChunk = createBlockedChunk(response);
                    chunks.set(id, blockedChunk);
                } else {
                    blockedChunk = chunk;
                    blockedChunk.status = BLOCKED;
                }
                promise.then(function() {
                    return resolveModuleChunk(blockedChunk, clientReference);
                }, function(error) {
                    return triggerErrorOnChunk(blockedChunk, error);
                });
            } else {
                if (!chunk) {
                    chunks.set(id, createResolvedModuleChunk(response, clientReference));
                } else {
                    resolveModuleChunk(chunk, clientReference);
                }
            }
        }
        function resolveErrorDev(response, id, digest, message, stack) {
            var error = new Error(message || 'An error occurred in the Server Components render but no message was provided');
            error.stack = stack;
            error.digest = digest;
            var errorWithDigest = error;
            var chunks = response._chunks;
            var chunk = chunks.get(id);
            if (!chunk) {
                chunks.set(id, createErrorChunk(response, errorWithDigest));
            } else {
                triggerErrorOnChunk(chunk, errorWithDigest);
            }
        }
        function resolveHint(response, code, model) {
            var hintModel = parseModel(response, model);
            dispatchHint(code, hintModel);
        }
        function processFullRow(response, id, tag, buffer, chunk) {
            var stringDecoder = response._stringDecoder;
            var row = '';
            for(var i = 0; i < buffer.length; i++){
                row += readPartialStringChunk(stringDecoder, buffer[i]);
            }
            row += readFinalStringChunk(stringDecoder, chunk);
            switch(tag){
                case 73:
                    {
                        resolveModule(response, id, row);
                        return;
                    }
                case 72:
                    {
                        var code = row[0];
                        resolveHint(response, code, row.slice(1));
                        return;
                    }
                case 69:
                    {
                        var errorInfo = JSON.parse(row);
                        {
                            resolveErrorDev(response, id, errorInfo.digest, errorInfo.message, errorInfo.stack);
                        }
                        return;
                    }
                case 84:
                    {
                        resolveText(response, id, row);
                        return;
                    }
                default:
                    {
                        resolveModel(response, id, row);
                        return;
                    }
            }
        }
        function processBinaryChunk(response, chunk) {
            var i = 0;
            var rowState = response._rowState;
            var rowID = response._rowID;
            var rowTag = response._rowTag;
            var rowLength = response._rowLength;
            var buffer = response._buffer;
            var chunkLength = chunk.length;
            while(i < chunkLength){
                var lastIdx = -1;
                switch(rowState){
                    case ROW_ID:
                        {
                            var byte = chunk[i++];
                            if (byte === 58) {
                                rowState = ROW_TAG;
                            } else {
                                rowID = rowID << 4 | (byte > 96 ? byte - 87 : byte - 48);
                            }
                            continue;
                        }
                    case ROW_TAG:
                        {
                            var resolvedRowTag = chunk[i];
                            if (resolvedRowTag === 84 || enableBinaryFlight) {
                                rowTag = resolvedRowTag;
                                rowState = ROW_LENGTH;
                                i++;
                            } else if (resolvedRowTag > 64 && resolvedRowTag < 91) {
                                rowTag = resolvedRowTag;
                                rowState = ROW_CHUNK_BY_NEWLINE;
                                i++;
                            } else {
                                rowTag = 0;
                                rowState = ROW_CHUNK_BY_NEWLINE;
                            }
                            continue;
                        }
                    case ROW_LENGTH:
                        {
                            var _byte = chunk[i++];
                            if (_byte === 44) {
                                rowState = ROW_CHUNK_BY_LENGTH;
                            } else {
                                rowLength = rowLength << 4 | (_byte > 96 ? _byte - 87 : _byte - 48);
                            }
                            continue;
                        }
                    case ROW_CHUNK_BY_NEWLINE:
                        {
                            lastIdx = chunk.indexOf(10, i);
                            break;
                        }
                    case ROW_CHUNK_BY_LENGTH:
                        {
                            lastIdx = i + rowLength;
                            if (lastIdx > chunk.length) {
                                lastIdx = -1;
                            }
                            break;
                        }
                }
                var offset = chunk.byteOffset + i;
                if (lastIdx > -1) {
                    var length = lastIdx - i;
                    var lastChunk = new Uint8Array(chunk.buffer, offset, length);
                    processFullRow(response, rowID, rowTag, buffer, lastChunk);
                    i = lastIdx;
                    if (rowState === ROW_CHUNK_BY_NEWLINE) {
                        i++;
                    }
                    rowState = ROW_ID;
                    rowTag = 0;
                    rowID = 0;
                    rowLength = 0;
                    buffer.length = 0;
                } else {
                    var _length = chunk.byteLength - i;
                    var remainingSlice = new Uint8Array(chunk.buffer, offset, _length);
                    buffer.push(remainingSlice);
                    rowLength -= remainingSlice.byteLength;
                    break;
                }
            }
            response._rowState = rowState;
            response._rowID = rowID;
            response._rowTag = rowTag;
            response._rowLength = rowLength;
        }
        function parseModel(response, json) {
            return JSON.parse(json, response._fromJSON);
        }
        function createFromJSONCallback(response) {
            return function(key, value) {
                if (typeof value === 'string') {
                    return parseModelString(response, this, key, value);
                }
                if (typeof value === 'object' && value !== null) {
                    return parseModelTuple(response, value);
                }
                return value;
            };
        }
        function close(response) {
            reportGlobalError(response, new Error('Connection closed.'));
        }
        function noServerCall() {
            throw new Error('Server Functions cannot be called during initial render. ' + 'This would create a fetch waterfall. Try to use a Server Component ' + 'to pass data to Client Components instead.');
        }
        function createServerReference(id, callServer) {
            return createServerReference$1(id, noServerCall);
        }
        function createResponseFromOptions(options) {
            return createResponse(options && options.moduleMap ? options.moduleMap : null, noServerCall);
        }
        function startReadingFromStream(response, stream) {
            var reader = stream.getReader();
            function progress(_ref) {
                var done = _ref.done, value = _ref.value;
                if (done) {
                    close(response);
                    return;
                }
                var buffer = value;
                processBinaryChunk(response, buffer);
                return reader.read().then(progress).catch(error);
            }
            function error(e) {
                reportGlobalError(response, e);
            }
            reader.read().then(progress).catch(error);
        }
        function createFromReadableStream(stream, options) {
            var response = createResponseFromOptions(options);
            startReadingFromStream(response, stream);
            return getRoot(response);
        }
        function createFromFetch(promiseForResponse, options) {
            var response = createResponseFromOptions(options);
            promiseForResponse.then(function(r) {
                startReadingFromStream(response, r.body);
            }, function(e) {
                reportGlobalError(response, e);
            });
            return getRoot(response);
        }
        exports.createFromFetch = createFromFetch;
        exports.createFromReadableStream = createFromReadableStream;
        exports.createServerReference = createServerReference;
    })();
}

}.call(this) }),
"[project]/node_modules/next/dist/compiled/react-server-dom-webpack/client.edge.js (ecmascript, ssr)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, k: __turbopack_refresh__, m: module, e: exports }) { !function() {

'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_require__("[project]/node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.edge.development.js (ecmascript, ssr)");
}

}.call(this) }),
"[project]/node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.node.development.js (ecmascript, ssr)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, k: __turbopack_refresh__, m: module, e: exports }) { !function() {

'use strict';
if ("TURBOPACK compile-time truthy", 1) {
    (function() {
        'use strict';
        var React = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/index.js (ecmascript, ssr)");
        var util = __turbopack_external_require__('util');
        var async_hooks = __turbopack_external_require__('async_hooks');
        var ReactDOM = __turbopack_require__("[project]/node_modules/next/dist/compiled/react-dom/server-rendering-stub.js (ecmascript, ssr)");
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
            {
                {
                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                        args[_key2 - 1] = arguments[_key2];
                    }
                    printWarning('error', format, args);
                }
            }
        }
        function printWarning(level, format, args) {
            {
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();
                if (stack !== '') {
                    format += '%s';
                    args = args.concat([
                        stack
                    ]);
                }
                var argsWithFormat = args.map(function(item) {
                    return String(item);
                });
                argsWithFormat.unshift('Warning: ' + format);
                Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
        }
        function scheduleWork(callback) {
            setImmediate(callback);
        }
        function flushBuffered(destination) {
            if (typeof destination.flush === 'function') {
                destination.flush();
            }
        }
        var VIEW_SIZE = 2048;
        var currentView = null;
        var writtenBytes = 0;
        var destinationHasCapacity = true;
        function beginWriting(destination) {
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
            destinationHasCapacity = true;
        }
        function writeStringChunk(destination, stringChunk) {
            if (stringChunk.length === 0) {
                return;
            }
            if (stringChunk.length * 3 > VIEW_SIZE) {
                if (writtenBytes > 0) {
                    writeToDestination(destination, currentView.subarray(0, writtenBytes));
                    currentView = new Uint8Array(VIEW_SIZE);
                    writtenBytes = 0;
                }
                writeToDestination(destination, textEncoder.encode(stringChunk));
                return;
            }
            var target = currentView;
            if (writtenBytes > 0) {
                target = currentView.subarray(writtenBytes);
            }
            var _textEncoder$encodeIn = textEncoder.encodeInto(stringChunk, target), read = _textEncoder$encodeIn.read, written = _textEncoder$encodeIn.written;
            writtenBytes += written;
            if (read < stringChunk.length) {
                writeToDestination(destination, currentView.subarray(0, writtenBytes));
                currentView = new Uint8Array(VIEW_SIZE);
                writtenBytes = textEncoder.encodeInto(stringChunk.slice(read), currentView).written;
            }
            if (writtenBytes === VIEW_SIZE) {
                writeToDestination(destination, currentView);
                currentView = new Uint8Array(VIEW_SIZE);
                writtenBytes = 0;
            }
        }
        function writeViewChunk(destination, chunk) {
            if (chunk.byteLength === 0) {
                return;
            }
            if (chunk.byteLength > VIEW_SIZE) {
                {
                    if (precomputedChunkSet && precomputedChunkSet.has(chunk)) {
                        error('A large precomputed chunk was passed to writeChunk without being copied.' + ' Large chunks get enqueued directly and are not copied. This is incompatible with precomputed chunks because you cannot enqueue the same precomputed chunk twice.' + ' Use "cloneChunk" to make a copy of this large precomputed chunk before writing it. This is a bug in React.');
                    }
                }
                if (writtenBytes > 0) {
                    writeToDestination(destination, currentView.subarray(0, writtenBytes));
                    currentView = new Uint8Array(VIEW_SIZE);
                    writtenBytes = 0;
                }
                writeToDestination(destination, chunk);
                return;
            }
            var bytesToWrite = chunk;
            var allowableBytes = currentView.length - writtenBytes;
            if (allowableBytes < bytesToWrite.byteLength) {
                if (allowableBytes === 0) {
                    writeToDestination(destination, currentView);
                } else {
                    currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
                    writtenBytes += allowableBytes;
                    writeToDestination(destination, currentView);
                    bytesToWrite = bytesToWrite.subarray(allowableBytes);
                }
                currentView = new Uint8Array(VIEW_SIZE);
                writtenBytes = 0;
            }
            currentView.set(bytesToWrite, writtenBytes);
            writtenBytes += bytesToWrite.byteLength;
            if (writtenBytes === VIEW_SIZE) {
                writeToDestination(destination, currentView);
                currentView = new Uint8Array(VIEW_SIZE);
                writtenBytes = 0;
            }
        }
        function writeChunk(destination, chunk) {
            if (typeof chunk === 'string') {
                writeStringChunk(destination, chunk);
            } else {
                writeViewChunk(destination, chunk);
            }
        }
        function writeToDestination(destination, view) {
            var currentHasCapacity = destination.write(view);
            destinationHasCapacity = destinationHasCapacity && currentHasCapacity;
        }
        function writeChunkAndReturn(destination, chunk) {
            writeChunk(destination, chunk);
            return destinationHasCapacity;
        }
        function completeWriting(destination) {
            if (currentView && writtenBytes > 0) {
                destination.write(currentView.subarray(0, writtenBytes));
            }
            currentView = null;
            writtenBytes = 0;
            destinationHasCapacity = true;
        }
        function close$1(destination) {
            destination.end();
        }
        var textEncoder = new util.TextEncoder();
        function stringToChunk(content) {
            return content;
        }
        var precomputedChunkSet = new Set();
        function byteLengthOfChunk(chunk) {
            return typeof chunk === 'string' ? Buffer.byteLength(chunk, 'utf8') : chunk.byteLength;
        }
        function closeWithError(destination, error) {
            destination.destroy(error);
        }
        var CLIENT_REFERENCE_TAG = Symbol.for('react.client.reference');
        var SERVER_REFERENCE_TAG = Symbol.for('react.server.reference');
        function isClientReference(reference) {
            return reference.$$typeof === CLIENT_REFERENCE_TAG;
        }
        function isServerReference(reference) {
            return reference.$$typeof === SERVER_REFERENCE_TAG;
        }
        function registerClientReference(proxyImplementation, id, exportName) {
            return registerClientReferenceImpl(proxyImplementation, id + '#' + exportName, false);
        }
        function registerClientReferenceImpl(proxyImplementation, id, async) {
            return Object.defineProperties(proxyImplementation, {
                $$typeof: {
                    value: CLIENT_REFERENCE_TAG
                },
                $$id: {
                    value: id
                },
                $$async: {
                    value: async
                }
            });
        }
        var FunctionBind = Function.prototype.bind;
        var ArraySlice = Array.prototype.slice;
        function bind() {
            var newFn = FunctionBind.apply(this, arguments);
            if (this.$$typeof === SERVER_REFERENCE_TAG) {
                var args = ArraySlice.call(arguments, 1);
                newFn.$$typeof = SERVER_REFERENCE_TAG;
                newFn.$$id = this.$$id;
                newFn.$$bound = this.$$bound ? this.$$bound.concat(args) : args;
            }
            return newFn;
        }
        function registerServerReference(reference, id, exportName) {
            return Object.defineProperties(reference, {
                $$typeof: {
                    value: SERVER_REFERENCE_TAG
                },
                $$id: {
                    value: exportName === null ? id : id + '#' + exportName
                },
                $$bound: {
                    value: null
                },
                bind: {
                    value: bind
                }
            });
        }
        var PROMISE_PROTOTYPE = Promise.prototype;
        var deepProxyHandlers = {
            get: function(target, name, receiver) {
                switch(name){
                    case '$$typeof':
                        return target.$$typeof;
                    case '$$id':
                        return target.$$id;
                    case '$$async':
                        return target.$$async;
                    case 'name':
                        return target.name;
                    case 'displayName':
                        return undefined;
                    case 'defaultProps':
                        return undefined;
                    case 'toJSON':
                        return undefined;
                    case Symbol.toPrimitive:
                        return Object.prototype[Symbol.toPrimitive];
                    case 'Provider':
                        throw new Error("Cannot render a Client Context Provider on the Server. " + "Instead, you can export a Client Component wrapper " + "that itself renders a Client Context Provider.");
                }
                var expression = String(target.name) + '.' + String(name);
                throw new Error("Cannot access " + expression + " on the server. " + 'You cannot dot into a client module from a server component. ' + 'You can only pass the imported name through.');
            },
            set: function() {
                throw new Error('Cannot assign to a client module from a server module.');
            }
        };
        var proxyHandlers = {
            get: function(target, name, receiver) {
                switch(name){
                    case '$$typeof':
                        return target.$$typeof;
                    case '$$id':
                        return target.$$id;
                    case '$$async':
                        return target.$$async;
                    case 'name':
                        return target.name;
                    case 'defaultProps':
                        return undefined;
                    case 'toJSON':
                        return undefined;
                    case Symbol.toPrimitive:
                        return Object.prototype[Symbol.toPrimitive];
                    case '__esModule':
                        var moduleId = target.$$id;
                        target.default = registerClientReferenceImpl(function() {
                            throw new Error("Attempted to call the default export of " + moduleId + " from the server " + "but it's on the client. It's not possible to invoke a client function from " + "the server, it can only be rendered as a Component or passed to props of a " + "Client Component.");
                        }, target.$$id + '#', target.$$async);
                        return true;
                    case 'then':
                        if (target.then) {
                            return target.then;
                        }
                        if (!target.$$async) {
                            var clientReference = registerClientReferenceImpl({}, target.$$id, true);
                            var proxy = new Proxy(clientReference, proxyHandlers);
                            target.status = 'fulfilled';
                            target.value = proxy;
                            var then = target.then = registerClientReferenceImpl(function then(resolve, reject) {
                                return Promise.resolve(resolve(proxy));
                            }, target.$$id + '#then', false);
                            return then;
                        } else {
                            return undefined;
                        }
                }
                var cachedReference = target[name];
                if (!cachedReference) {
                    var reference = registerClientReferenceImpl(function() {
                        throw new Error("Attempted to call " + String(name) + "() from the server but " + String(name) + " is on the client. " + "It's not possible to invoke a client function from the server, it can " + "only be rendered as a Component or passed to props of a Client Component.");
                    }, target.$$id + '#' + name, target.$$async);
                    Object.defineProperty(reference, 'name', {
                        value: name
                    });
                    cachedReference = target[name] = new Proxy(reference, deepProxyHandlers);
                }
                return cachedReference;
            },
            getPrototypeOf: function(target) {
                return PROMISE_PROTOTYPE;
            },
            set: function() {
                throw new Error('Cannot assign to a client module from a server module.');
            }
        };
        function createClientModuleProxy(moduleId) {
            var clientReference = registerClientReferenceImpl({}, moduleId, false);
            return new Proxy(clientReference, proxyHandlers);
        }
        function getClientReferenceKey(reference) {
            return reference.$$async ? reference.$$id + '#async' : reference.$$id;
        }
        function resolveClientReferenceMetadata(config, clientReference) {
            var modulePath = clientReference.$$id;
            var name = '';
            var resolvedModuleData = config[modulePath];
            if (resolvedModuleData) {
                name = resolvedModuleData.name;
            } else {
                var idx = modulePath.lastIndexOf('#');
                if (idx !== -1) {
                    name = modulePath.slice(idx + 1);
                    resolvedModuleData = config[modulePath.slice(0, idx)];
                }
                if (!resolvedModuleData) {
                    throw new Error('Could not find the module "' + modulePath + '" in the React Client Manifest. ' + 'This is probably a bug in the React Server Components bundler.');
                }
            }
            return {
                id: resolvedModuleData.id,
                chunks: resolvedModuleData.chunks,
                name: name,
                async: !!clientReference.$$async
            };
        }
        function getServerReferenceId(config, serverReference) {
            return serverReference.$$id;
        }
        function getServerReferenceBoundArguments(config, serverReference) {
            return serverReference.$$bound;
        }
        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var ReactDOMFlightServerDispatcher = {
            prefetchDNS: prefetchDNS,
            preconnect: preconnect,
            preload: preload,
            preinit: preinit
        };
        function prefetchDNS(href, options) {
            {
                if (typeof href === 'string') {
                    var request = resolveRequest();
                    if (request) {
                        var hints = getHints(request);
                        var key = 'D' + href;
                        if (hints.has(key)) {
                            return;
                        }
                        hints.add(key);
                        if (options) {
                            emitHint(request, 'D', [
                                href,
                                options
                            ]);
                        } else {
                            emitHint(request, 'D', href);
                        }
                    }
                }
            }
        }
        function preconnect(href, options) {
            {
                if (typeof href === 'string') {
                    var request = resolveRequest();
                    if (request) {
                        var hints = getHints(request);
                        var crossOrigin = options == null || typeof options.crossOrigin !== 'string' ? null : options.crossOrigin === 'use-credentials' ? 'use-credentials' : '';
                        var key = "C" + (crossOrigin === null ? 'null' : crossOrigin) + "|" + href;
                        if (hints.has(key)) {
                            return;
                        }
                        hints.add(key);
                        if (options) {
                            emitHint(request, 'C', [
                                href,
                                options
                            ]);
                        } else {
                            emitHint(request, 'C', href);
                        }
                    }
                }
            }
        }
        function preload(href, options) {
            {
                if (typeof href === 'string') {
                    var request = resolveRequest();
                    if (request) {
                        var hints = getHints(request);
                        var key = 'L' + href;
                        if (hints.has(key)) {
                            return;
                        }
                        hints.add(key);
                        emitHint(request, 'L', [
                            href,
                            options
                        ]);
                    }
                }
            }
        }
        function preinit(href, options) {
            {
                if (typeof href === 'string') {
                    var request = resolveRequest();
                    if (request) {
                        var hints = getHints(request);
                        var key = 'I' + href;
                        if (hints.has(key)) {
                            return;
                        }
                        hints.add(key);
                        emitHint(request, 'I', [
                            href,
                            options
                        ]);
                    }
                }
            }
        }
        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;
        function prepareHostDispatcher() {
            ReactDOMCurrentDispatcher.current = ReactDOMFlightServerDispatcher;
        }
        function createHints() {
            return new Set();
        }
        var requestStorage = new async_hooks.AsyncLocalStorage();
        var REACT_ELEMENT_TYPE = Symbol.for('react.element');
        var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
        var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
        var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
        var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
        var REACT_MEMO_TYPE = Symbol.for('react.memo');
        var REACT_LAZY_TYPE = Symbol.for('react.lazy');
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for('react.default_value');
        var REACT_MEMO_CACHE_SENTINEL = Symbol.for('react.memo_cache_sentinel');
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === 'function') {
                return maybeIterator;
            }
            return null;
        }
        var rendererSigil;
        {
            rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
            {
                prev.context._currentValue = prev.parentValue;
            }
        }
        function pushNode(next) {
            {
                next.context._currentValue = next.value;
            }
        }
        function popToNearestCommonAncestor(prev, next) {
            if (prev === next) ;
            else {
                popNode(prev);
                var parentPrev = prev.parent;
                var parentNext = next.parent;
                if (parentPrev === null) {
                    if (parentNext !== null) {
                        throw new Error('The stacks must reach the root at the same time. This is a bug in React.');
                    }
                } else {
                    if (parentNext === null) {
                        throw new Error('The stacks must reach the root at the same time. This is a bug in React.');
                    }
                    popToNearestCommonAncestor(parentPrev, parentNext);
                    pushNode(next);
                }
            }
        }
        function popAllPrevious(prev) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev !== null) {
                popAllPrevious(parentPrev);
            }
        }
        function pushAllNext(next) {
            var parentNext = next.parent;
            if (parentNext !== null) {
                pushAllNext(parentNext);
            }
            pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev === null) {
                throw new Error('The depth must equal at least at zero before reaching the root. This is a bug in React.');
            }
            if (parentPrev.depth === next.depth) {
                popToNearestCommonAncestor(parentPrev, next);
            } else {
                popPreviousToCommonLevel(parentPrev, next);
            }
        }
        function popNextToCommonLevel(prev, next) {
            var parentNext = next.parent;
            if (parentNext === null) {
                throw new Error('The depth must equal at least at zero before reaching the root. This is a bug in React.');
            }
            if (prev.depth === parentNext.depth) {
                popToNearestCommonAncestor(prev, parentNext);
            } else {
                popNextToCommonLevel(prev, parentNext);
            }
            pushNode(next);
        }
        function switchContext(newSnapshot) {
            var prev = currentActiveSnapshot;
            var next = newSnapshot;
            if (prev !== next) {
                if (prev === null) {
                    pushAllNext(next);
                } else if (next === null) {
                    popAllPrevious(prev);
                } else if (prev.depth === next.depth) {
                    popToNearestCommonAncestor(prev, next);
                } else if (prev.depth > next.depth) {
                    popPreviousToCommonLevel(prev, next);
                } else {
                    popNextToCommonLevel(prev, next);
                }
                currentActiveSnapshot = next;
            }
        }
        function pushProvider(context, nextValue) {
            var prevValue;
            {
                prevValue = context._currentValue;
                context._currentValue = nextValue;
                {
                    if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
                    }
                    context._currentRenderer = rendererSigil;
                }
            }
            var prevNode = currentActiveSnapshot;
            var newNode = {
                parent: prevNode,
                depth: prevNode === null ? 0 : prevNode.depth + 1,
                context: context,
                parentValue: prevValue,
                value: nextValue
            };
            currentActiveSnapshot = newNode;
            return newNode;
        }
        function popProvider() {
            var prevSnapshot = currentActiveSnapshot;
            if (prevSnapshot === null) {
                throw new Error('Tried to pop a Context at the root of the app. This is a bug in React.');
            }
            {
                var value = prevSnapshot.parentValue;
                if (value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
                    prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;
                } else {
                    prevSnapshot.context._currentValue = value;
                }
            }
            return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
            return currentActiveSnapshot;
        }
        function readContext$1(context) {
            var value = context._currentValue;
            return value;
        }
        var SuspenseException = new Error("Suspense Exception: This is not a real error! It's an implementation " + 'detail of `use` to interrupt the current render. You must either ' + 'rethrow it immediately, or move the `use` call outside of the ' + '`try/catch` block. Capturing without rethrowing will lead to ' + 'unexpected behavior.\n\n' + 'To handle async errors, wrap your component in an error boundary, or ' + "call the promise's `.catch` method and pass the result to `use`");
        function createThenableState() {
            return [];
        }
        function noop() {}
        function trackUsedThenable(thenableState, thenable, index) {
            var previous = thenableState[index];
            if (previous === undefined) {
                thenableState.push(thenable);
            } else {
                if (previous !== thenable) {
                    thenable.then(noop, noop);
                    thenable = previous;
                }
            }
            switch(thenable.status){
                case 'fulfilled':
                    {
                        var fulfilledValue = thenable.value;
                        return fulfilledValue;
                    }
                case 'rejected':
                    {
                        var rejectedError = thenable.reason;
                        throw rejectedError;
                    }
                default:
                    {
                        if (typeof thenable.status === 'string') ;
                        else {
                            var pendingThenable = thenable;
                            pendingThenable.status = 'pending';
                            pendingThenable.then(function(fulfilledValue) {
                                if (thenable.status === 'pending') {
                                    var fulfilledThenable = thenable;
                                    fulfilledThenable.status = 'fulfilled';
                                    fulfilledThenable.value = fulfilledValue;
                                }
                            }, function(error) {
                                if (thenable.status === 'pending') {
                                    var rejectedThenable = thenable;
                                    rejectedThenable.status = 'rejected';
                                    rejectedThenable.reason = error;
                                }
                            });
                            switch(thenable.status){
                                case 'fulfilled':
                                    {
                                        var fulfilledThenable = thenable;
                                        return fulfilledThenable.value;
                                    }
                                case 'rejected':
                                    {
                                        var rejectedThenable = thenable;
                                        throw rejectedThenable.reason;
                                    }
                            }
                        }
                        suspendedThenable = thenable;
                        throw SuspenseException;
                    }
            }
        }
        var suspendedThenable = null;
        function getSuspendedThenable() {
            if (suspendedThenable === null) {
                throw new Error('Expected a suspended thenable. This is a bug in React. Please file ' + 'an issue.');
            }
            var thenable = suspendedThenable;
            suspendedThenable = null;
            return thenable;
        }
        var currentRequest$1 = null;
        var thenableIndexCounter = 0;
        var thenableState = null;
        function prepareToUseHooksForRequest(request) {
            currentRequest$1 = request;
        }
        function resetHooksForRequest() {
            currentRequest$1 = null;
        }
        function prepareToUseHooksForComponent(prevThenableState) {
            thenableIndexCounter = 0;
            thenableState = prevThenableState;
        }
        function getThenableStateAfterSuspending() {
            var state = thenableState;
            thenableState = null;
            return state;
        }
        function readContext(context) {
            {
                if (context.$$typeof !== REACT_SERVER_CONTEXT_TYPE) {
                    if (isClientReference(context)) {
                        error('Cannot read a Client Context from a Server Component.');
                    } else {
                        error('Only createServerContext is supported in Server Components.');
                    }
                }
                if (currentRequest$1 === null) {
                    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
                }
            }
            return readContext$1(context);
        }
        var HooksDispatcher = {
            useMemo: function(nextCreate) {
                return nextCreate();
            },
            useCallback: function(callback) {
                return callback;
            },
            useDebugValue: function() {},
            useDeferredValue: unsupportedHook,
            useTransition: unsupportedHook,
            readContext: readContext,
            useContext: readContext,
            useReducer: unsupportedHook,
            useRef: unsupportedHook,
            useState: unsupportedHook,
            useInsertionEffect: unsupportedHook,
            useLayoutEffect: unsupportedHook,
            useImperativeHandle: unsupportedHook,
            useEffect: unsupportedHook,
            useId: useId,
            useSyncExternalStore: unsupportedHook,
            useCacheRefresh: function() {
                return unsupportedRefresh;
            },
            useMemoCache: function(size) {
                var data = new Array(size);
                for(var i = 0; i < size; i++){
                    data[i] = REACT_MEMO_CACHE_SENTINEL;
                }
                return data;
            },
            use: use
        };
        function unsupportedHook() {
            throw new Error('This Hook is not supported in Server Components.');
        }
        function unsupportedRefresh() {
            throw new Error('Refreshing the cache is not supported in Server Components.');
        }
        function useId() {
            if (currentRequest$1 === null) {
                throw new Error('useId can only be used while React is rendering');
            }
            var id = currentRequest$1.identifierCount++;
            return ':' + currentRequest$1.identifierPrefix + 'S' + id.toString(32) + ':';
        }
        function use(usable) {
            if (usable !== null && typeof usable === 'object' || typeof usable === 'function') {
                if (typeof usable.then === 'function') {
                    var thenable = usable;
                    var index = thenableIndexCounter;
                    thenableIndexCounter += 1;
                    if (thenableState === null) {
                        thenableState = createThenableState();
                    }
                    return trackUsedThenable(thenableState, thenable, index);
                } else if (usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
                    var context = usable;
                    return readContext(context);
                }
            }
            {
                if (isClientReference(usable)) {
                    error('Cannot use() an already resolved Client Reference.');
                }
            }
            throw new Error('An unsupported type was passed to use(): ' + String(usable));
        }
        function createSignal() {
            return new AbortController().signal;
        }
        function resolveCache() {
            var request = resolveRequest();
            if (request) {
                return getCache(request);
            }
            return new Map();
        }
        var DefaultCacheDispatcher = {
            getCacheSignal: function() {
                var cache = resolveCache();
                var entry = cache.get(createSignal);
                if (entry === undefined) {
                    entry = createSignal();
                    cache.set(createSignal, entry);
                }
                return entry;
            },
            getCacheForType: function(resourceType) {
                var cache = resolveCache();
                var entry = cache.get(resourceType);
                if (entry === undefined) {
                    entry = resourceType();
                    cache.set(resourceType, entry);
                }
                return entry;
            }
        };
        var isArrayImpl = Array.isArray;
        function isArray(a) {
            return isArrayImpl(a);
        }
        var jsxPropsParents = new WeakMap();
        var jsxChildrenParents = new WeakMap();
        function isObjectPrototype(object) {
            if (!object) {
                return false;
            }
            var ObjectPrototype = Object.prototype;
            if (object === ObjectPrototype) {
                return true;
            }
            if (Object.getPrototypeOf(object)) {
                return false;
            }
            var names = Object.getOwnPropertyNames(object);
            for(var i = 0; i < names.length; i++){
                if (!(names[i] in ObjectPrototype)) {
                    return false;
                }
            }
            return true;
        }
        function isSimpleObject(object) {
            if (!isObjectPrototype(Object.getPrototypeOf(object))) {
                return false;
            }
            var names = Object.getOwnPropertyNames(object);
            for(var i = 0; i < names.length; i++){
                var descriptor = Object.getOwnPropertyDescriptor(object, names[i]);
                if (!descriptor) {
                    return false;
                }
                if (!descriptor.enumerable) {
                    if ((names[i] === 'key' || names[i] === 'ref') && typeof descriptor.get === 'function') {
                        continue;
                    }
                    return false;
                }
            }
            return true;
        }
        function objectName(object) {
            var name = Object.prototype.toString.call(object);
            return name.replace(/^\[object (.*)\]$/, function(m, p0) {
                return p0;
            });
        }
        function describeKeyForErrorMessage(key) {
            var encodedKey = JSON.stringify(key);
            return '"' + key + '"' === encodedKey ? key : encodedKey;
        }
        function describeValueForErrorMessage(value) {
            switch(typeof value){
                case 'string':
                    {
                        return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + '...');
                    }
                case 'object':
                    {
                        if (isArray(value)) {
                            return '[...]';
                        }
                        var name = objectName(value);
                        if (name === 'Object') {
                            return '{...}';
                        }
                        return name;
                    }
                case 'function':
                    return 'function';
                default:
                    return String(value);
            }
        }
        function describeElementType(type) {
            if (typeof type === 'string') {
                return type;
            }
            switch(type){
                case REACT_SUSPENSE_TYPE:
                    return 'Suspense';
                case REACT_SUSPENSE_LIST_TYPE:
                    return 'SuspenseList';
            }
            if (typeof type === 'object') {
                switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                        return describeElementType(type.render);
                    case REACT_MEMO_TYPE:
                        return describeElementType(type.type);
                    case REACT_LAZY_TYPE:
                        {
                            var lazyComponent = type;
                            var payload = lazyComponent._payload;
                            var init = lazyComponent._init;
                            try {
                                return describeElementType(init(payload));
                            } catch (x) {}
                        }
                }
            }
            return '';
        }
        function describeObjectForErrorMessage(objectOrArray, expandedName) {
            var objKind = objectName(objectOrArray);
            if (objKind !== 'Object' && objKind !== 'Array') {
                return objKind;
            }
            var str = '';
            var start = -1;
            var length = 0;
            if (isArray(objectOrArray)) {
                if (jsxChildrenParents.has(objectOrArray)) {
                    var type = jsxChildrenParents.get(objectOrArray);
                    str = '<' + describeElementType(type) + '>';
                    var array = objectOrArray;
                    for(var i = 0; i < array.length; i++){
                        var value = array[i];
                        var substr = void 0;
                        if (typeof value === 'string') {
                            substr = value;
                        } else if (typeof value === 'object' && value !== null) {
                            substr = '{' + describeObjectForErrorMessage(value) + '}';
                        } else {
                            substr = '{' + describeValueForErrorMessage(value) + '}';
                        }
                        if ('' + i === expandedName) {
                            start = str.length;
                            length = substr.length;
                            str += substr;
                        } else if (substr.length < 15 && str.length + substr.length < 40) {
                            str += substr;
                        } else {
                            str += '{...}';
                        }
                    }
                    str += '</' + describeElementType(type) + '>';
                } else {
                    str = '[';
                    var _array = objectOrArray;
                    for(var _i = 0; _i < _array.length; _i++){
                        if (_i > 0) {
                            str += ', ';
                        }
                        var _value = _array[_i];
                        var _substr = void 0;
                        if (typeof _value === 'object' && _value !== null) {
                            _substr = describeObjectForErrorMessage(_value);
                        } else {
                            _substr = describeValueForErrorMessage(_value);
                        }
                        if ('' + _i === expandedName) {
                            start = str.length;
                            length = _substr.length;
                            str += _substr;
                        } else if (_substr.length < 10 && str.length + _substr.length < 40) {
                            str += _substr;
                        } else {
                            str += '...';
                        }
                    }
                    str += ']';
                }
            } else {
                if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {
                    str = '<' + describeElementType(objectOrArray.type) + '/>';
                } else if (jsxPropsParents.has(objectOrArray)) {
                    var _type = jsxPropsParents.get(objectOrArray);
                    str = '<' + (describeElementType(_type) || '...');
                    var object = objectOrArray;
                    var names = Object.keys(object);
                    for(var _i2 = 0; _i2 < names.length; _i2++){
                        str += ' ';
                        var name = names[_i2];
                        str += describeKeyForErrorMessage(name) + '=';
                        var _value2 = object[name];
                        var _substr2 = void 0;
                        if (name === expandedName && typeof _value2 === 'object' && _value2 !== null) {
                            _substr2 = describeObjectForErrorMessage(_value2);
                        } else {
                            _substr2 = describeValueForErrorMessage(_value2);
                        }
                        if (typeof _value2 !== 'string') {
                            _substr2 = '{' + _substr2 + '}';
                        }
                        if (name === expandedName) {
                            start = str.length;
                            length = _substr2.length;
                            str += _substr2;
                        } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {
                            str += _substr2;
                        } else {
                            str += '...';
                        }
                    }
                    str += '>';
                } else {
                    str = '{';
                    var _object = objectOrArray;
                    var _names = Object.keys(_object);
                    for(var _i3 = 0; _i3 < _names.length; _i3++){
                        if (_i3 > 0) {
                            str += ', ';
                        }
                        var _name = _names[_i3];
                        str += describeKeyForErrorMessage(_name) + ': ';
                        var _value3 = _object[_name];
                        var _substr3 = void 0;
                        if (typeof _value3 === 'object' && _value3 !== null) {
                            _substr3 = describeObjectForErrorMessage(_value3);
                        } else {
                            _substr3 = describeValueForErrorMessage(_value3);
                        }
                        if (_name === expandedName) {
                            start = str.length;
                            length = _substr3.length;
                            str += _substr3;
                        } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {
                            str += _substr3;
                        } else {
                            str += '...';
                        }
                    }
                    str += '}';
                }
            }
            if (expandedName === undefined) {
                return str;
            }
            if (start > -1 && length > 0) {
                var highlight = ' '.repeat(start) + '^'.repeat(length);
                return '\n  ' + str + '\n  ' + highlight;
            }
            return '\n  ' + str;
        }
        var ContextRegistry = ReactSharedInternals.ContextRegistry;
        function getOrCreateServerContext(globalName) {
            if (!ContextRegistry[globalName]) {
                ContextRegistry[globalName] = React.createServerContext(globalName, REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED);
            }
            return ContextRegistry[globalName];
        }
        var stringify = JSON.stringify;
        var PENDING$1 = 0;
        var COMPLETED = 1;
        var ABORTED = 3;
        var ERRORED$1 = 4;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;
        function defaultErrorHandler(error) {
            console['error'](error);
        }
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        function createRequest(model, bundlerConfig, onError, context, identifierPrefix) {
            if (ReactCurrentCache.current !== null && ReactCurrentCache.current !== DefaultCacheDispatcher) {
                throw new Error('Currently React only supports one RSC renderer at a time.');
            }
            prepareHostDispatcher();
            ReactCurrentCache.current = DefaultCacheDispatcher;
            var abortSet = new Set();
            var pingedTasks = [];
            var hints = createHints();
            var request = {
                status: OPEN,
                flushScheduled: false,
                fatalError: null,
                destination: null,
                bundlerConfig: bundlerConfig,
                cache: new Map(),
                nextChunkId: 0,
                pendingChunks: 0,
                hints: hints,
                abortableTasks: abortSet,
                pingedTasks: pingedTasks,
                completedImportChunks: [],
                completedHintChunks: [],
                completedRegularChunks: [],
                completedErrorChunks: [],
                writtenSymbols: new Map(),
                writtenClientReferences: new Map(),
                writtenServerReferences: new Map(),
                writtenProviders: new Map(),
                identifierPrefix: identifierPrefix || '',
                identifierCount: 1,
                onError: onError === undefined ? defaultErrorHandler : onError,
                toJSON: function(key, value) {
                    return resolveModelToJSON(request, this, key, value);
                }
            };
            request.pendingChunks++;
            var rootContext = createRootContext(context);
            var rootTask = createTask(request, model, rootContext, abortSet);
            pingedTasks.push(rootTask);
            return request;
        }
        var currentRequest = null;
        function resolveRequest() {
            if (currentRequest) return currentRequest;
            {
                var store = requestStorage.getStore();
                if (store) return store;
            }
            return null;
        }
        function createRootContext(reqContext) {
            return importServerContexts(reqContext);
        }
        var POP = {};
        function serializeThenable(request, thenable) {
            request.pendingChunks++;
            var newTask = createTask(request, null, getActiveContext(), request.abortableTasks);
            switch(thenable.status){
                case 'fulfilled':
                    {
                        newTask.model = thenable.value;
                        pingTask(request, newTask);
                        return newTask.id;
                    }
                case 'rejected':
                    {
                        var x = thenable.reason;
                        var digest = logRecoverableError(request, x);
                        {
                            var _getErrorMessageAndSt = getErrorMessageAndStackDev(x), message = _getErrorMessageAndSt.message, stack = _getErrorMessageAndSt.stack;
                            emitErrorChunkDev(request, newTask.id, digest, message, stack);
                        }
                        return newTask.id;
                    }
                default:
                    {
                        if (typeof thenable.status === 'string') {
                            break;
                        }
                        var pendingThenable = thenable;
                        pendingThenable.status = 'pending';
                        pendingThenable.then(function(fulfilledValue) {
                            if (thenable.status === 'pending') {
                                var fulfilledThenable = thenable;
                                fulfilledThenable.status = 'fulfilled';
                                fulfilledThenable.value = fulfilledValue;
                            }
                        }, function(error) {
                            if (thenable.status === 'pending') {
                                var rejectedThenable = thenable;
                                rejectedThenable.status = 'rejected';
                                rejectedThenable.reason = error;
                            }
                        });
                        break;
                    }
            }
            thenable.then(function(value) {
                newTask.model = value;
                pingTask(request, newTask);
            }, function(reason) {
                newTask.status = ERRORED$1;
                var digest = logRecoverableError(request, reason);
                {
                    var _getErrorMessageAndSt2 = getErrorMessageAndStackDev(reason), _message = _getErrorMessageAndSt2.message, _stack = _getErrorMessageAndSt2.stack;
                    emitErrorChunkDev(request, newTask.id, digest, _message, _stack);
                }
                if (request.destination !== null) {
                    flushCompletedChunks(request, request.destination);
                }
            });
            return newTask.id;
        }
        function emitHint(request, code, model) {
            emitHintChunk(request, code, model);
            enqueueFlush(request);
        }
        function getHints(request) {
            return request.hints;
        }
        function getCache(request) {
            return request.cache;
        }
        function readThenable(thenable) {
            if (thenable.status === 'fulfilled') {
                return thenable.value;
            } else if (thenable.status === 'rejected') {
                throw thenable.reason;
            }
            throw thenable;
        }
        function createLazyWrapperAroundWakeable(wakeable) {
            var thenable = wakeable;
            switch(thenable.status){
                case 'fulfilled':
                case 'rejected':
                    break;
                default:
                    {
                        if (typeof thenable.status === 'string') {
                            break;
                        }
                        var pendingThenable = thenable;
                        pendingThenable.status = 'pending';
                        pendingThenable.then(function(fulfilledValue) {
                            if (thenable.status === 'pending') {
                                var fulfilledThenable = thenable;
                                fulfilledThenable.status = 'fulfilled';
                                fulfilledThenable.value = fulfilledValue;
                            }
                        }, function(error) {
                            if (thenable.status === 'pending') {
                                var rejectedThenable = thenable;
                                rejectedThenable.status = 'rejected';
                                rejectedThenable.reason = error;
                            }
                        });
                        break;
                    }
            }
            var lazyType = {
                $$typeof: REACT_LAZY_TYPE,
                _payload: thenable,
                _init: readThenable
            };
            return lazyType;
        }
        function attemptResolveElement(request, type, key, ref, props, prevThenableState) {
            if (ref !== null && ref !== undefined) {
                throw new Error('Refs cannot be used in Server Components, nor passed to Client Components.');
            }
            {
                jsxPropsParents.set(props, type);
                if (typeof props.children === 'object' && props.children !== null) {
                    jsxChildrenParents.set(props.children, type);
                }
            }
            if (typeof type === 'function') {
                if (isClientReference(type)) {
                    return [
                        REACT_ELEMENT_TYPE,
                        type,
                        key,
                        props
                    ];
                }
                prepareToUseHooksForComponent(prevThenableState);
                var result = type(props);
                if (typeof result === 'object' && result !== null && typeof result.then === 'function') {
                    var thenable = result;
                    if (thenable.status === 'fulfilled') {
                        return thenable.value;
                    }
                    return createLazyWrapperAroundWakeable(result);
                }
                return result;
            } else if (typeof type === 'string') {
                return [
                    REACT_ELEMENT_TYPE,
                    type,
                    key,
                    props
                ];
            } else if (typeof type === 'symbol') {
                if (type === REACT_FRAGMENT_TYPE) {
                    return props.children;
                }
                return [
                    REACT_ELEMENT_TYPE,
                    type,
                    key,
                    props
                ];
            } else if (type != null && typeof type === 'object') {
                if (isClientReference(type)) {
                    return [
                        REACT_ELEMENT_TYPE,
                        type,
                        key,
                        props
                    ];
                }
                switch(type.$$typeof){
                    case REACT_LAZY_TYPE:
                        {
                            var payload = type._payload;
                            var init = type._init;
                            var wrappedType = init(payload);
                            return attemptResolveElement(request, wrappedType, key, ref, props, prevThenableState);
                        }
                    case REACT_FORWARD_REF_TYPE:
                        {
                            var render = type.render;
                            prepareToUseHooksForComponent(prevThenableState);
                            return render(props, undefined);
                        }
                    case REACT_MEMO_TYPE:
                        {
                            return attemptResolveElement(request, type.type, key, ref, props, prevThenableState);
                        }
                    case REACT_PROVIDER_TYPE:
                        {
                            pushProvider(type._context, props.value);
                            {
                                var extraKeys = Object.keys(props).filter(function(value) {
                                    if (value === 'children' || value === 'value') {
                                        return false;
                                    }
                                    return true;
                                });
                                if (extraKeys.length !== 0) {
                                    error('ServerContext can only have a value prop and children. Found: %s', JSON.stringify(extraKeys));
                                }
                            }
                            return [
                                REACT_ELEMENT_TYPE,
                                type,
                                key,
                                {
                                    value: props.value,
                                    children: props.children,
                                    __pop: POP
                                }
                            ];
                        }
                }
            }
            throw new Error("Unsupported Server Component type: " + describeValueForErrorMessage(type));
        }
        function pingTask(request, task) {
            var pingedTasks = request.pingedTasks;
            pingedTasks.push(task);
            if (pingedTasks.length === 1) {
                request.flushScheduled = request.destination !== null;
                scheduleWork(function() {
                    return performWork(request);
                });
            }
        }
        function createTask(request, model, context, abortSet) {
            var id = request.nextChunkId++;
            var task = {
                id: id,
                status: PENDING$1,
                model: model,
                context: context,
                ping: function() {
                    return pingTask(request, task);
                },
                thenableState: null
            };
            abortSet.add(task);
            return task;
        }
        function serializeByValueID(id) {
            return '$' + id.toString(16);
        }
        function serializeLazyID(id) {
            return '$L' + id.toString(16);
        }
        function serializePromiseID(id) {
            return '$@' + id.toString(16);
        }
        function serializeServerReferenceID(id) {
            return '$F' + id.toString(16);
        }
        function serializeSymbolReference(name) {
            return '$S' + name;
        }
        function serializeProviderReference(name) {
            return '$P' + name;
        }
        function serializeNumber(number) {
            if (Number.isFinite(number)) {
                if (number === 0 && 1 / number === -Infinity) {
                    return '$-0';
                } else {
                    return number;
                }
            } else {
                if (number === Infinity) {
                    return '$Infinity';
                } else if (number === -Infinity) {
                    return '$-Infinity';
                } else {
                    return '$NaN';
                }
            }
        }
        function serializeUndefined() {
            return '$undefined';
        }
        function serializeDateFromDateJSON(dateJSON) {
            return '$D' + dateJSON;
        }
        function serializeBigInt(n) {
            return '$n' + n.toString(10);
        }
        function serializeClientReference(request, parent, key, clientReference) {
            var clientReferenceKey = getClientReferenceKey(clientReference);
            var writtenClientReferences = request.writtenClientReferences;
            var existingId = writtenClientReferences.get(clientReferenceKey);
            if (existingId !== undefined) {
                if (parent[0] === REACT_ELEMENT_TYPE && key === '1') {
                    return serializeLazyID(existingId);
                }
                return serializeByValueID(existingId);
            }
            try {
                var clientReferenceMetadata = resolveClientReferenceMetadata(request.bundlerConfig, clientReference);
                request.pendingChunks++;
                var importId = request.nextChunkId++;
                emitImportChunk(request, importId, clientReferenceMetadata);
                writtenClientReferences.set(clientReferenceKey, importId);
                if (parent[0] === REACT_ELEMENT_TYPE && key === '1') {
                    return serializeLazyID(importId);
                }
                return serializeByValueID(importId);
            } catch (x) {
                request.pendingChunks++;
                var errorId = request.nextChunkId++;
                var digest = logRecoverableError(request, x);
                {
                    var _getErrorMessageAndSt3 = getErrorMessageAndStackDev(x), message = _getErrorMessageAndSt3.message, stack = _getErrorMessageAndSt3.stack;
                    emitErrorChunkDev(request, errorId, digest, message, stack);
                }
                return serializeByValueID(errorId);
            }
        }
        function outlineModel(request, value) {
            request.pendingChunks++;
            var outlinedId = request.nextChunkId++;
            var processedChunk = processModelChunk(request, outlinedId, value);
            request.completedRegularChunks.push(processedChunk);
            return outlinedId;
        }
        function serializeServerReference(request, parent, key, serverReference) {
            var writtenServerReferences = request.writtenServerReferences;
            var existingId = writtenServerReferences.get(serverReference);
            if (existingId !== undefined) {
                return serializeServerReferenceID(existingId);
            }
            var bound = getServerReferenceBoundArguments(request.bundlerConfig, serverReference);
            var serverReferenceMetadata = {
                id: getServerReferenceId(request.bundlerConfig, serverReference),
                bound: bound ? Promise.resolve(bound) : null
            };
            var metadataId = outlineModel(request, serverReferenceMetadata);
            writtenServerReferences.set(serverReference, metadataId);
            return serializeServerReferenceID(metadataId);
        }
        function serializeLargeTextString(request, text) {
            request.pendingChunks += 2;
            var textId = request.nextChunkId++;
            var textChunk = stringToChunk(text);
            var headerChunk = processTextHeader(request, textId, byteLengthOfChunk(textChunk));
            request.completedRegularChunks.push(headerChunk, textChunk);
            return serializeByValueID(textId);
        }
        function serializeMap(request, map) {
            var id = outlineModel(request, Array.from(map));
            return '$Q' + id.toString(16);
        }
        function serializeSet(request, set) {
            var id = outlineModel(request, Array.from(set));
            return '$W' + id.toString(16);
        }
        function escapeStringValue(value) {
            if (value[0] === '$') {
                return '$' + value;
            } else {
                return value;
            }
        }
        var insideContextProps = null;
        var isInsideContextValue = false;
        function resolveModelToJSON(request, parent, key, value) {
            {
                var originalValue = parent[key];
                if (typeof originalValue === 'object' && originalValue !== value && !(originalValue instanceof Date)) {
                    if (objectName(originalValue) !== 'Object') {
                        var jsxParentType = jsxChildrenParents.get(parent);
                        if (typeof jsxParentType === 'string') {
                            error('%s objects cannot be rendered as text children. Try formatting it using toString().%s', objectName(originalValue), describeObjectForErrorMessage(parent, key));
                        } else {
                            error('Only plain objects can be passed to Client Components from Server Components. ' + '%s objects are not supported.%s', objectName(originalValue), describeObjectForErrorMessage(parent, key));
                        }
                    } else {
                        error('Only plain objects can be passed to Client Components from Server Components. ' + 'Objects with toJSON methods are not supported. Convert it manually ' + 'to a simple value before passing it to props.%s', describeObjectForErrorMessage(parent, key));
                    }
                }
            }
            switch(value){
                case REACT_ELEMENT_TYPE:
                    return '$';
            }
            {
                if (parent[0] === REACT_ELEMENT_TYPE && parent[1] && parent[1].$$typeof === REACT_PROVIDER_TYPE && key === '3') {
                    insideContextProps = value;
                } else if (insideContextProps === parent && key === 'value') {
                    isInsideContextValue = true;
                } else if (insideContextProps === parent && key === 'children') {
                    isInsideContextValue = false;
                }
            }
            while(typeof value === 'object' && value !== null && (value.$$typeof === REACT_ELEMENT_TYPE || value.$$typeof === REACT_LAZY_TYPE)){
                {
                    if (isInsideContextValue) {
                        error('React elements are not allowed in ServerContext');
                    }
                }
                try {
                    switch(value.$$typeof){
                        case REACT_ELEMENT_TYPE:
                            {
                                var element = value;
                                value = attemptResolveElement(request, element.type, element.key, element.ref, element.props, null);
                                break;
                            }
                        case REACT_LAZY_TYPE:
                            {
                                var payload = value._payload;
                                var init = value._init;
                                value = init(payload);
                                break;
                            }
                    }
                } catch (thrownValue) {
                    var x = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;
                    if (typeof x === 'object' && x !== null && typeof x.then === 'function') {
                        request.pendingChunks++;
                        var newTask = createTask(request, value, getActiveContext(), request.abortableTasks);
                        var ping = newTask.ping;
                        x.then(ping, ping);
                        newTask.thenableState = getThenableStateAfterSuspending();
                        return serializeLazyID(newTask.id);
                    } else {
                        request.pendingChunks++;
                        var errorId = request.nextChunkId++;
                        var digest = logRecoverableError(request, x);
                        {
                            var _getErrorMessageAndSt4 = getErrorMessageAndStackDev(x), message = _getErrorMessageAndSt4.message, stack = _getErrorMessageAndSt4.stack;
                            emitErrorChunkDev(request, errorId, digest, message, stack);
                        }
                        return serializeLazyID(errorId);
                    }
                }
            }
            if (value === null) {
                return null;
            }
            if (typeof value === 'object') {
                if (isClientReference(value)) {
                    return serializeClientReference(request, parent, key, value);
                } else if (typeof value.then === 'function') {
                    var promiseId = serializeThenable(request, value);
                    return serializePromiseID(promiseId);
                } else if (value.$$typeof === REACT_PROVIDER_TYPE) {
                    var providerKey = value._context._globalName;
                    var writtenProviders = request.writtenProviders;
                    var providerId = writtenProviders.get(key);
                    if (providerId === undefined) {
                        request.pendingChunks++;
                        providerId = request.nextChunkId++;
                        writtenProviders.set(providerKey, providerId);
                        emitProviderChunk(request, providerId, providerKey);
                    }
                    return serializeByValueID(providerId);
                } else if (value === POP) {
                    popProvider();
                    {
                        insideContextProps = null;
                        isInsideContextValue = false;
                    }
                    return undefined;
                }
                if (value instanceof Map) {
                    return serializeMap(request, value);
                }
                if (value instanceof Set) {
                    return serializeSet(request, value);
                }
                if (!isArray(value)) {
                    var iteratorFn = getIteratorFn(value);
                    if (iteratorFn) {
                        return Array.from(value);
                    }
                }
                {
                    if (value !== null && !isArray(value)) {
                        if (objectName(value) !== 'Object') {
                            error('Only plain objects can be passed to Client Components from Server Components. ' + '%s objects are not supported.%s', objectName(value), describeObjectForErrorMessage(parent, key));
                        } else if (!isSimpleObject(value)) {
                            error('Only plain objects can be passed to Client Components from Server Components. ' + 'Classes or other objects with methods are not supported.%s', describeObjectForErrorMessage(parent, key));
                        } else if (Object.getOwnPropertySymbols) {
                            var symbols = Object.getOwnPropertySymbols(value);
                            if (symbols.length > 0) {
                                error('Only plain objects can be passed to Client Components from Server Components. ' + 'Objects with symbol properties like %s are not supported.%s', symbols[0].description, describeObjectForErrorMessage(parent, key));
                            }
                        }
                    }
                }
                return value;
            }
            if (typeof value === 'string') {
                if (value[value.length - 1] === 'Z') {
                    var _originalValue = parent[key];
                    if (_originalValue instanceof Date) {
                        return serializeDateFromDateJSON(value);
                    }
                }
                if (value.length >= 1024) {
                    return serializeLargeTextString(request, value);
                }
                return escapeStringValue(value);
            }
            if (typeof value === 'boolean') {
                return value;
            }
            if (typeof value === 'number') {
                return serializeNumber(value);
            }
            if (typeof value === 'undefined') {
                return serializeUndefined();
            }
            if (typeof value === 'function') {
                if (isClientReference(value)) {
                    return serializeClientReference(request, parent, key, value);
                }
                if (isServerReference(value)) {
                    return serializeServerReference(request, parent, key, value);
                }
                if (/^on[A-Z]/.test(key)) {
                    throw new Error('Event handlers cannot be passed to Client Component props.' + describeObjectForErrorMessage(parent, key) + '\nIf you need interactivity, consider converting part of this to a Client Component.');
                } else {
                    throw new Error('Functions cannot be passed directly to Client Components ' + 'unless you explicitly expose it by marking it with "use server".' + describeObjectForErrorMessage(parent, key));
                }
            }
            if (typeof value === 'symbol') {
                var writtenSymbols = request.writtenSymbols;
                var existingId = writtenSymbols.get(value);
                if (existingId !== undefined) {
                    return serializeByValueID(existingId);
                }
                var name = value.description;
                if (Symbol.for(name) !== value) {
                    throw new Error('Only global symbols received from Symbol.for(...) can be passed to Client Components. ' + ("The symbol Symbol.for(" + value.description + ") cannot be found among global symbols.") + describeObjectForErrorMessage(parent, key));
                }
                request.pendingChunks++;
                var symbolId = request.nextChunkId++;
                emitSymbolChunk(request, symbolId, name);
                writtenSymbols.set(value, symbolId);
                return serializeByValueID(symbolId);
            }
            if (typeof value === 'bigint') {
                return serializeBigInt(value);
            }
            throw new Error("Type " + typeof value + " is not supported in Client Component props." + describeObjectForErrorMessage(parent, key));
        }
        function logRecoverableError(request, error) {
            var onError = request.onError;
            var errorDigest = onError(error);
            if (errorDigest != null && typeof errorDigest !== 'string') {
                throw new Error("onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"" + typeof errorDigest + "\" instead");
            }
            return errorDigest || '';
        }
        function getErrorMessageAndStackDev(error) {
            {
                var message;
                var stack = '';
                try {
                    if (error instanceof Error) {
                        message = String(error.message);
                        stack = String(error.stack);
                    } else {
                        message = 'Error: ' + error;
                    }
                } catch (x) {
                    message = 'An error occurred but serializing the error message failed.';
                }
                return {
                    message: message,
                    stack: stack
                };
            }
        }
        function fatalError(request, error) {
            if (request.destination !== null) {
                request.status = CLOSED;
                closeWithError(request.destination, error);
            } else {
                request.status = CLOSING;
                request.fatalError = error;
            }
        }
        function emitErrorChunkProd(request, id, digest) {
            var processedChunk = processErrorChunkProd();
            request.completedErrorChunks.push(processedChunk);
        }
        function emitErrorChunkDev(request, id, digest, message, stack) {
            var processedChunk = processErrorChunkDev(request, id, digest, message, stack);
            request.completedErrorChunks.push(processedChunk);
        }
        function emitImportChunk(request, id, clientReferenceMetadata) {
            var processedChunk = processImportChunk(request, id, clientReferenceMetadata);
            request.completedImportChunks.push(processedChunk);
        }
        function emitHintChunk(request, code, model) {
            var processedChunk = processHintChunk(request, request.nextChunkId++, code, model);
            request.completedHintChunks.push(processedChunk);
        }
        function emitSymbolChunk(request, id, name) {
            var symbolReference = serializeSymbolReference(name);
            var processedChunk = processReferenceChunk(request, id, symbolReference);
            request.completedImportChunks.push(processedChunk);
        }
        function emitProviderChunk(request, id, contextName) {
            var contextReference = serializeProviderReference(contextName);
            var processedChunk = processReferenceChunk(request, id, contextReference);
            request.completedRegularChunks.push(processedChunk);
        }
        function retryTask(request, task) {
            if (task.status !== PENDING$1) {
                return;
            }
            switchContext(task.context);
            try {
                var value = task.model;
                if (typeof value === 'object' && value !== null && value.$$typeof === REACT_ELEMENT_TYPE) {
                    var element = value;
                    var prevThenableState = task.thenableState;
                    task.model = value;
                    value = attemptResolveElement(request, element.type, element.key, element.ref, element.props, prevThenableState);
                    task.thenableState = null;
                    while(typeof value === 'object' && value !== null && value.$$typeof === REACT_ELEMENT_TYPE){
                        var nextElement = value;
                        task.model = value;
                        value = attemptResolveElement(request, nextElement.type, nextElement.key, nextElement.ref, nextElement.props, null);
                    }
                }
                var processedChunk = processModelChunk(request, task.id, value);
                request.completedRegularChunks.push(processedChunk);
                request.abortableTasks.delete(task);
                task.status = COMPLETED;
            } catch (thrownValue) {
                var x = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;
                if (typeof x === 'object' && x !== null && typeof x.then === 'function') {
                    var ping = task.ping;
                    x.then(ping, ping);
                    task.thenableState = getThenableStateAfterSuspending();
                    return;
                } else {
                    request.abortableTasks.delete(task);
                    task.status = ERRORED$1;
                    var digest = logRecoverableError(request, x);
                    {
                        var _getErrorMessageAndSt5 = getErrorMessageAndStackDev(x), message = _getErrorMessageAndSt5.message, stack = _getErrorMessageAndSt5.stack;
                        emitErrorChunkDev(request, task.id, digest, message, stack);
                    }
                }
            }
        }
        function performWork(request) {
            var prevDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = HooksDispatcher;
            var prevRequest = currentRequest;
            currentRequest = request;
            prepareToUseHooksForRequest(request);
            try {
                var pingedTasks = request.pingedTasks;
                request.pingedTasks = [];
                for(var i = 0; i < pingedTasks.length; i++){
                    var task = pingedTasks[i];
                    retryTask(request, task);
                }
                if (request.destination !== null) {
                    flushCompletedChunks(request, request.destination);
                }
            } catch (error) {
                logRecoverableError(request, error);
                fatalError(request, error);
            } finally{
                ReactCurrentDispatcher.current = prevDispatcher;
                resetHooksForRequest();
                currentRequest = prevRequest;
            }
        }
        function abortTask(task, request, errorId) {
            task.status = ABORTED;
            var ref = serializeByValueID(errorId);
            var processedChunk = processReferenceChunk(request, task.id, ref);
            request.completedErrorChunks.push(processedChunk);
        }
        function flushCompletedChunks(request, destination) {
            beginWriting();
            try {
                var importsChunks = request.completedImportChunks;
                var i = 0;
                for(; i < importsChunks.length; i++){
                    request.pendingChunks--;
                    var chunk = importsChunks[i];
                    var keepWriting = writeChunkAndReturn(destination, chunk);
                    if (!keepWriting) {
                        request.destination = null;
                        i++;
                        break;
                    }
                }
                importsChunks.splice(0, i);
                var hintChunks = request.completedHintChunks;
                i = 0;
                for(; i < hintChunks.length; i++){
                    var _chunk = hintChunks[i];
                    var _keepWriting = writeChunkAndReturn(destination, _chunk);
                    if (!_keepWriting) {
                        request.destination = null;
                        i++;
                        break;
                    }
                }
                hintChunks.splice(0, i);
                var regularChunks = request.completedRegularChunks;
                i = 0;
                for(; i < regularChunks.length; i++){
                    request.pendingChunks--;
                    var _chunk2 = regularChunks[i];
                    var _keepWriting2 = writeChunkAndReturn(destination, _chunk2);
                    if (!_keepWriting2) {
                        request.destination = null;
                        i++;
                        break;
                    }
                }
                regularChunks.splice(0, i);
                var errorChunks = request.completedErrorChunks;
                i = 0;
                for(; i < errorChunks.length; i++){
                    request.pendingChunks--;
                    var _chunk3 = errorChunks[i];
                    var _keepWriting3 = writeChunkAndReturn(destination, _chunk3);
                    if (!_keepWriting3) {
                        request.destination = null;
                        i++;
                        break;
                    }
                }
                errorChunks.splice(0, i);
            } finally{
                request.flushScheduled = false;
                completeWriting(destination);
            }
            flushBuffered(destination);
            if (request.pendingChunks === 0) {
                close$1(destination);
            }
        }
        function startWork(request) {
            request.flushScheduled = request.destination !== null;
            {
                scheduleWork(function() {
                    return requestStorage.run(request, performWork, request);
                });
            }
        }
        function enqueueFlush(request) {
            if (request.flushScheduled === false && request.pingedTasks.length === 0 && request.destination !== null) {
                var destination = request.destination;
                request.flushScheduled = true;
                scheduleWork(function() {
                    return flushCompletedChunks(request, destination);
                });
            }
        }
        function startFlowing(request, destination) {
            if (request.status === CLOSING) {
                request.status = CLOSED;
                closeWithError(destination, request.fatalError);
                return;
            }
            if (request.status === CLOSED) {
                return;
            }
            if (request.destination !== null) {
                return;
            }
            request.destination = destination;
            try {
                flushCompletedChunks(request, destination);
            } catch (error) {
                logRecoverableError(request, error);
                fatalError(request, error);
            }
        }
        function abort(request, reason) {
            try {
                var abortableTasks = request.abortableTasks;
                if (abortableTasks.size > 0) {
                    var error = reason === undefined ? new Error('The render was aborted by the server without a reason.') : reason;
                    var digest = logRecoverableError(request, error);
                    request.pendingChunks++;
                    var errorId = request.nextChunkId++;
                    if ("TURBOPACK compile-time truthy", 1) {
                        var _getErrorMessageAndSt6 = getErrorMessageAndStackDev(error), message = _getErrorMessageAndSt6.message, stack = _getErrorMessageAndSt6.stack;
                        emitErrorChunkDev(request, errorId, digest, message, stack);
                    }
                    abortableTasks.forEach(function(task) {
                        return abortTask(task, request, errorId);
                    });
                    abortableTasks.clear();
                }
                if (request.destination !== null) {
                    flushCompletedChunks(request, request.destination);
                }
            } catch (error) {
                logRecoverableError(request, error);
                fatalError(request, error);
            }
        }
        function importServerContexts(contexts) {
            if (contexts) {
                var prevContext = getActiveContext();
                switchContext(rootContextSnapshot);
                for(var i = 0; i < contexts.length; i++){
                    var _contexts$i = contexts[i], name = _contexts$i[0], value = _contexts$i[1];
                    var context = getOrCreateServerContext(name);
                    pushProvider(context, value);
                }
                var importedContext = getActiveContext();
                switchContext(prevContext);
                return importedContext;
            }
            return rootContextSnapshot;
        }
        function serializeRowHeader(tag, id) {
            return id.toString(16) + ':' + tag;
        }
        function processErrorChunkProd(request, id, digest) {
            {
                throw new Error('processErrorChunkProd should never be called while in development mode. Use processErrorChunkDev instead. This is a bug in React.');
            }
        }
        function processErrorChunkDev(request, id, digest, message, stack) {
            var errorInfo = {
                digest: digest,
                message: message,
                stack: stack
            };
            var row = serializeRowHeader('E', id) + stringify(errorInfo) + '\n';
            return stringToChunk(row);
        }
        function processModelChunk(request, id, model) {
            var json = stringify(model, request.toJSON);
            var row = id.toString(16) + ':' + json + '\n';
            return stringToChunk(row);
        }
        function processReferenceChunk(request, id, reference) {
            var json = stringify(reference);
            var row = id.toString(16) + ':' + json + '\n';
            return stringToChunk(row);
        }
        function processImportChunk(request, id, clientReferenceMetadata) {
            var json = stringify(clientReferenceMetadata);
            var row = serializeRowHeader('I', id) + json + '\n';
            return stringToChunk(row);
        }
        function processHintChunk(request, id, code, model) {
            var json = stringify(model);
            var row = serializeRowHeader('H' + code, id) + json + '\n';
            return stringToChunk(row);
        }
        function processTextHeader(request, id, binaryLength) {
            var row = id.toString(16) + ':T' + binaryLength.toString(16) + ',';
            return stringToChunk(row);
        }
        function resolveServerReference(bundlerConfig, id) {
            var name = '';
            var resolvedModuleData = bundlerConfig[id];
            if (resolvedModuleData) {
                name = resolvedModuleData.name;
            } else {
                var idx = id.lastIndexOf('#');
                if (idx !== -1) {
                    name = id.slice(idx + 1);
                    resolvedModuleData = bundlerConfig[id.slice(0, idx)];
                }
                if (!resolvedModuleData) {
                    throw new Error('Could not find the module "' + id + '" in the React Server Manifest. ' + 'This is probably a bug in the React Server Components bundler.');
                }
            }
            return {
                id: resolvedModuleData.id,
                chunks: resolvedModuleData.chunks,
                name: name,
                async: false
            };
        }
        var chunkCache = new Map();
        function requireAsyncModule(id) {
            var promise = globalThis.__next_require__(id);
            if (typeof promise.then !== 'function') {
                return null;
            } else if (promise.status === 'fulfilled') {
                return null;
            } else {
                promise.then(function(value) {
                    var fulfilledThenable = promise;
                    fulfilledThenable.status = 'fulfilled';
                    fulfilledThenable.value = value;
                }, function(reason) {
                    var rejectedThenable = promise;
                    rejectedThenable.status = 'rejected';
                    rejectedThenable.reason = reason;
                });
                return promise;
            }
        }
        function ignoreReject() {}
        function preloadModule(metadata) {
            var chunks = metadata.chunks;
            var promises = [];
            for(var i = 0; i < chunks.length; i++){
                var chunkId = chunks[i];
                var entry = chunkCache.get(chunkId);
                if (entry === undefined) {
                    var thenable = globalThis.__next_chunk_load__(chunkId);
                    promises.push(thenable);
                    var resolve = chunkCache.set.bind(chunkCache, chunkId, null);
                    thenable.then(resolve, ignoreReject);
                    chunkCache.set(chunkId, thenable);
                } else if (entry !== null) {
                    promises.push(entry);
                }
            }
            if (metadata.async) {
                if (promises.length === 0) {
                    return requireAsyncModule(metadata.id);
                } else {
                    return Promise.all(promises).then(function() {
                        return requireAsyncModule(metadata.id);
                    });
                }
            } else if (promises.length > 0) {
                return Promise.all(promises);
            } else {
                return null;
            }
        }
        function requireModule(metadata) {
            var moduleExports = globalThis.__next_require__(metadata.id);
            if (metadata.async) {
                if (typeof moduleExports.then !== 'function') ;
                else if (moduleExports.status === 'fulfilled') {
                    moduleExports = moduleExports.value;
                } else {
                    throw moduleExports.reason;
                }
            }
            if (metadata.name === '*') {
                return moduleExports;
            }
            if (metadata.name === '') {
                return moduleExports.__esModule ? moduleExports.default : moduleExports;
            }
            return moduleExports[metadata.name];
        }
        var PENDING = 'pending';
        var BLOCKED = 'blocked';
        var RESOLVED_MODEL = 'resolved_model';
        var INITIALIZED = 'fulfilled';
        var ERRORED = 'rejected';
        function Chunk(status, value, reason, response) {
            this.status = status;
            this.value = value;
            this.reason = reason;
            this._response = response;
        }
        Chunk.prototype = Object.create(Promise.prototype);
        Chunk.prototype.then = function(resolve, reject) {
            var chunk = this;
            switch(chunk.status){
                case RESOLVED_MODEL:
                    initializeModelChunk(chunk);
                    break;
            }
            switch(chunk.status){
                case INITIALIZED:
                    resolve(chunk.value);
                    break;
                case PENDING:
                case BLOCKED:
                    if (resolve) {
                        if (chunk.value === null) {
                            chunk.value = [];
                        }
                        chunk.value.push(resolve);
                    }
                    if (reject) {
                        if (chunk.reason === null) {
                            chunk.reason = [];
                        }
                        chunk.reason.push(reject);
                    }
                    break;
                default:
                    reject(chunk.reason);
                    break;
            }
        };
        function getRoot(response) {
            var chunk = getChunk(response, 0);
            return chunk;
        }
        function createPendingChunk(response) {
            return new Chunk(PENDING, null, null, response);
        }
        function wakeChunk(listeners, value) {
            for(var i = 0; i < listeners.length; i++){
                var listener = listeners[i];
                listener(value);
            }
        }
        function wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners) {
            switch(chunk.status){
                case INITIALIZED:
                    wakeChunk(resolveListeners, chunk.value);
                    break;
                case PENDING:
                case BLOCKED:
                    chunk.value = resolveListeners;
                    chunk.reason = rejectListeners;
                    break;
                case ERRORED:
                    if (rejectListeners) {
                        wakeChunk(rejectListeners, chunk.reason);
                    }
                    break;
            }
        }
        function triggerErrorOnChunk(chunk, error) {
            if (chunk.status !== PENDING && chunk.status !== BLOCKED) {
                return;
            }
            var listeners = chunk.reason;
            var erroredChunk = chunk;
            erroredChunk.status = ERRORED;
            erroredChunk.reason = error;
            if (listeners !== null) {
                wakeChunk(listeners, error);
            }
        }
        function createResolvedModelChunk(response, value) {
            return new Chunk(RESOLVED_MODEL, value, null, response);
        }
        function resolveModelChunk(chunk, value) {
            if (chunk.status !== PENDING) {
                return;
            }
            var resolveListeners = chunk.value;
            var rejectListeners = chunk.reason;
            var resolvedChunk = chunk;
            resolvedChunk.status = RESOLVED_MODEL;
            resolvedChunk.value = value;
            if (resolveListeners !== null) {
                initializeModelChunk(resolvedChunk);
                wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);
            }
        }
        function bindArgs$1(fn, args) {
            return fn.bind.apply(fn, [
                null
            ].concat(args));
        }
        function loadServerReference$1(response, id, bound, parentChunk, parentObject, key) {
            var serverReference = resolveServerReference(response._bundlerConfig, id);
            var preloadPromise = preloadModule(serverReference);
            var promise;
            if (bound) {
                promise = Promise.all([
                    bound,
                    preloadPromise
                ]).then(function(_ref) {
                    var args = _ref[0];
                    return bindArgs$1(requireModule(serverReference), args);
                });
            } else {
                if (preloadPromise) {
                    promise = Promise.resolve(preloadPromise).then(function() {
                        return requireModule(serverReference);
                    });
                } else {
                    return requireModule(serverReference);
                }
            }
            promise.then(createModelResolver(parentChunk, parentObject, key), createModelReject(parentChunk));
            return null;
        }
        var initializingChunk = null;
        var initializingChunkBlockedModel = null;
        function initializeModelChunk(chunk) {
            var prevChunk = initializingChunk;
            var prevBlocked = initializingChunkBlockedModel;
            initializingChunk = chunk;
            initializingChunkBlockedModel = null;
            try {
                var value = JSON.parse(chunk.value, chunk._response._fromJSON);
                if (initializingChunkBlockedModel !== null && initializingChunkBlockedModel.deps > 0) {
                    initializingChunkBlockedModel.value = value;
                    var blockedChunk = chunk;
                    blockedChunk.status = BLOCKED;
                    blockedChunk.value = null;
                    blockedChunk.reason = null;
                } else {
                    var initializedChunk = chunk;
                    initializedChunk.status = INITIALIZED;
                    initializedChunk.value = value;
                }
            } catch (error) {
                var erroredChunk = chunk;
                erroredChunk.status = ERRORED;
                erroredChunk.reason = error;
            } finally{
                initializingChunk = prevChunk;
                initializingChunkBlockedModel = prevBlocked;
            }
        }
        function reportGlobalError(response, error) {
            response._chunks.forEach(function(chunk) {
                if (chunk.status === PENDING) {
                    triggerErrorOnChunk(chunk, error);
                }
            });
        }
        function getChunk(response, id) {
            var chunks = response._chunks;
            var chunk = chunks.get(id);
            if (!chunk) {
                var prefix = response._prefix;
                var key = prefix + id;
                var backingEntry = response._formData.get(key);
                if (backingEntry != null) {
                    chunk = createResolvedModelChunk(response, backingEntry);
                } else {
                    chunk = createPendingChunk(response);
                }
                chunks.set(id, chunk);
            }
            return chunk;
        }
        function createModelResolver(chunk, parentObject, key) {
            var blocked;
            if (initializingChunkBlockedModel) {
                blocked = initializingChunkBlockedModel;
                blocked.deps++;
            } else {
                blocked = initializingChunkBlockedModel = {
                    deps: 1,
                    value: null
                };
            }
            return function(value) {
                parentObject[key] = value;
                blocked.deps--;
                if (blocked.deps === 0) {
                    if (chunk.status !== BLOCKED) {
                        return;
                    }
                    var resolveListeners = chunk.value;
                    var initializedChunk = chunk;
                    initializedChunk.status = INITIALIZED;
                    initializedChunk.value = blocked.value;
                    if (resolveListeners !== null) {
                        wakeChunk(resolveListeners, blocked.value);
                    }
                }
            };
        }
        function createModelReject(chunk) {
            return function(error) {
                return triggerErrorOnChunk(chunk, error);
            };
        }
        function getOutlinedModel(response, id) {
            var chunk = getChunk(response, id);
            if (chunk.status === RESOLVED_MODEL) {
                initializeModelChunk(chunk);
            }
            if (chunk.status !== INITIALIZED) {
                throw chunk.reason;
            }
            return chunk.value;
        }
        function parseModelString(response, parentObject, key, value) {
            if (value[0] === '$') {
                switch(value[1]){
                    case '$':
                        {
                            return value.slice(1);
                        }
                    case '@':
                        {
                            var id = parseInt(value.slice(2), 16);
                            var chunk = getChunk(response, id);
                            return chunk;
                        }
                    case 'S':
                        {
                            return Symbol.for(value.slice(2));
                        }
                    case 'F':
                        {
                            var _id = parseInt(value.slice(2), 16);
                            var metaData = getOutlinedModel(response, _id);
                            return loadServerReference$1(response, metaData.id, metaData.bound, initializingChunk, parentObject, key);
                        }
                    case 'Q':
                        {
                            var _id2 = parseInt(value.slice(2), 16);
                            var data = getOutlinedModel(response, _id2);
                            return new Map(data);
                        }
                    case 'W':
                        {
                            var _id3 = parseInt(value.slice(2), 16);
                            var _data = getOutlinedModel(response, _id3);
                            return new Set(_data);
                        }
                    case 'K':
                        {
                            var stringId = value.slice(2);
                            var formPrefix = response._prefix + stringId + '_';
                            var _data2 = new FormData();
                            var backingFormData = response._formData;
                            backingFormData.forEach(function(entry, entryKey) {
                                if (entryKey.startsWith(formPrefix)) {
                                    _data2.append(entryKey.slice(formPrefix.length), entry);
                                }
                            });
                            return _data2;
                        }
                    case 'I':
                        {
                            return Infinity;
                        }
                    case '-':
                        {
                            if (value === '$-0') {
                                return -0;
                            } else {
                                return -Infinity;
                            }
                        }
                    case 'N':
                        {
                            return NaN;
                        }
                    case 'u':
                        {
                            return undefined;
                        }
                    case 'D':
                        {
                            return new Date(Date.parse(value.slice(2)));
                        }
                    case 'n':
                        {
                            return BigInt(value.slice(2));
                        }
                    default:
                        {
                            var _id4 = parseInt(value.slice(1), 16);
                            var _chunk = getChunk(response, _id4);
                            switch(_chunk.status){
                                case RESOLVED_MODEL:
                                    initializeModelChunk(_chunk);
                                    break;
                            }
                            switch(_chunk.status){
                                case INITIALIZED:
                                    return _chunk.value;
                                case PENDING:
                                case BLOCKED:
                                    var parentChunk = initializingChunk;
                                    _chunk.then(createModelResolver(parentChunk, parentObject, key), createModelReject(parentChunk));
                                    return null;
                                default:
                                    throw _chunk.reason;
                            }
                        }
                }
            }
            return value;
        }
        function createResponse(bundlerConfig, formFieldPrefix) {
            var backingFormData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new FormData();
            var chunks = new Map();
            var response = {
                _bundlerConfig: bundlerConfig,
                _prefix: formFieldPrefix,
                _formData: backingFormData,
                _chunks: chunks,
                _fromJSON: function(key, value) {
                    if (typeof value === 'string') {
                        return parseModelString(response, this, key, value);
                    }
                    return value;
                }
            };
            return response;
        }
        function resolveField(response, key, value) {
            response._formData.append(key, value);
            var prefix = response._prefix;
            if (key.startsWith(prefix)) {
                var chunks = response._chunks;
                var id = +key.slice(prefix.length);
                var chunk = chunks.get(id);
                if (chunk) {
                    resolveModelChunk(chunk, value);
                }
            }
        }
        function resolveFileInfo(response, key, filename, mime) {
            return {
                chunks: [],
                filename: filename,
                mime: mime
            };
        }
        function resolveFileChunk(response, handle, chunk) {
            handle.chunks.push(chunk);
        }
        function resolveFileComplete(response, key, handle) {
            var blob = new Blob(handle.chunks, {
                type: handle.mime
            });
            response._formData.append(key, blob, handle.filename);
        }
        function close(response) {
            reportGlobalError(response, new Error('Connection closed.'));
        }
        function bindArgs(fn, args) {
            return fn.bind.apply(fn, [
                null
            ].concat(args));
        }
        function loadServerReference(bundlerConfig, id, bound) {
            var serverReference = resolveServerReference(bundlerConfig, id);
            var preloadPromise = preloadModule(serverReference);
            if (bound) {
                return Promise.all([
                    bound,
                    preloadPromise
                ]).then(function(_ref) {
                    var args = _ref[0];
                    return bindArgs(requireModule(serverReference), args);
                });
            } else if (preloadPromise) {
                return Promise.resolve(preloadPromise).then(function() {
                    return requireModule(serverReference);
                });
            } else {
                return Promise.resolve(requireModule(serverReference));
            }
        }
        function decodeAction(body, serverManifest) {
            var formData = new FormData();
            var action = null;
            body.forEach(function(value, key) {
                if (!key.startsWith('$ACTION_')) {
                    formData.append(key, value);
                    return;
                }
                if (key.startsWith('$ACTION_REF_')) {
                    var formFieldPrefix = '$ACTION_' + key.slice(12) + ':';
                    var actionResponse = createResponse(serverManifest, formFieldPrefix, body);
                    close(actionResponse);
                    var refPromise = getRoot(actionResponse);
                    refPromise.then(function() {});
                    if (refPromise.status !== 'fulfilled') {
                        throw refPromise.reason;
                    }
                    var metaData = refPromise.value;
                    action = loadServerReference(serverManifest, metaData.id, metaData.bound);
                    return;
                }
                if (key.startsWith('$ACTION_ID_')) {
                    var id = key.slice(11);
                    action = loadServerReference(serverManifest, id, null);
                    return;
                }
            });
            if (action === null) {
                return null;
            }
            return action.then(function(fn) {
                return fn.bind(null, formData);
            });
        }
        function createDrainHandler(destination, request) {
            return function() {
                return startFlowing(request, destination);
            };
        }
        function renderToPipeableStream(model, webpackMap, options) {
            var request = createRequest(model, webpackMap, options ? options.onError : undefined, options ? options.context : undefined, options ? options.identifierPrefix : undefined);
            var hasStartedFlowing = false;
            startWork(request);
            return {
                pipe: function(destination) {
                    if (hasStartedFlowing) {
                        throw new Error('React currently only supports piping to one writable stream.');
                    }
                    hasStartedFlowing = true;
                    startFlowing(request, destination);
                    destination.on('drain', createDrainHandler(destination, request));
                    return destination;
                },
                abort: function(reason) {
                    abort(request, reason);
                }
            };
        }
        function decodeReplyFromBusboy(busboyStream, webpackMap) {
            var response = createResponse(webpackMap, '');
            var pendingFiles = 0;
            var queuedFields = [];
            busboyStream.on('field', function(name, value) {
                if (pendingFiles > 0) {
                    queuedFields.push(name, value);
                } else {
                    resolveField(response, name, value);
                }
            });
            busboyStream.on('file', function(name, value, _ref) {
                var filename = _ref.filename, encoding = _ref.encoding, mimeType = _ref.mimeType;
                if (encoding.toLowerCase() === 'base64') {
                    throw new Error("React doesn't accept base64 encoded file uploads because we don't expect " + "form data passed from a browser to ever encode data that way. If that's " + 'the wrong assumption, we can easily fix it.');
                }
                pendingFiles++;
                var file = resolveFileInfo(response, name, filename, mimeType);
                value.on('data', function(chunk) {
                    resolveFileChunk(response, file, chunk);
                });
                value.on('end', function() {
                    resolveFileComplete(response, name, file);
                    pendingFiles--;
                    if (pendingFiles === 0) {
                        for(var i = 0; i < queuedFields.length; i += 2){
                            resolveField(response, queuedFields[i], queuedFields[i + 1]);
                        }
                        queuedFields.length = 0;
                    }
                });
            });
            busboyStream.on('finish', function() {
                close(response);
            });
            busboyStream.on('error', function(err) {
                reportGlobalError(response, err);
            });
            return getRoot(response);
        }
        function decodeReply(body, webpackMap) {
            if (typeof body === 'string') {
                var form = new FormData();
                form.append('0', body);
                body = form;
            }
            var response = createResponse(webpackMap, '', body);
            close(response);
            return getRoot(response);
        }
        exports.createClientModuleProxy = createClientModuleProxy;
        exports.decodeAction = decodeAction;
        exports.decodeReply = decodeReply;
        exports.decodeReplyFromBusboy = decodeReplyFromBusboy;
        exports.registerClientReference = registerClientReference;
        exports.registerServerReference = registerServerReference;
        exports.renderToPipeableStream = renderToPipeableStream;
    })();
}

}.call(this) }),
"[project]/node_modules/next/dist/compiled/react-server-dom-webpack/server.node.js (ecmascript, ssr)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, k: __turbopack_refresh__, m: module, e: exports }) { !function() {

'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_require__("[project]/node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.node.development.js (ecmascript, ssr)");
}

}.call(this) }),
"[project]/node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js (ecmascript, ssr)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, k: __turbopack_refresh__, m: module, e: exports }) { !function() {

'use strict';
if ("TURBOPACK compile-time truthy", 1) {
    (function() {
        'use strict';
        var ReactDOM = __turbopack_require__("[project]/node_modules/next/dist/compiled/react-dom/server-rendering-stub.js (ecmascript, ssr)");
        var React = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/index.js (ecmascript, ssr)");
        var enableBinaryFlight = false;
        function createStringDecoder() {
            return new TextDecoder();
        }
        var decoderOptions = {
            stream: true
        };
        function readPartialStringChunk(decoder, buffer) {
            return decoder.decode(buffer, decoderOptions);
        }
        function readFinalStringChunk(decoder, buffer) {
            return decoder.decode(buffer);
        }
        function resolveClientReference(bundlerConfig, metadata) {
            if (bundlerConfig) {
                var moduleExports = bundlerConfig[metadata.id];
                var resolvedModuleData = moduleExports[metadata.name];
                var name;
                if (resolvedModuleData) {
                    name = resolvedModuleData.name;
                } else {
                    resolvedModuleData = moduleExports['*'];
                    if (!resolvedModuleData) {
                        throw new Error('Could not find the module "' + metadata.id + '" in the React SSR Manifest. ' + 'This is probably a bug in the React Server Components bundler.');
                    }
                    name = metadata.name;
                }
                return {
                    id: resolvedModuleData.id,
                    chunks: resolvedModuleData.chunks,
                    name: name,
                    async: !!metadata.async
                };
            }
            return metadata;
        }
        var chunkCache = new Map();
        function requireAsyncModule(id) {
            var promise = globalThis.__next_require__(id);
            if (typeof promise.then !== 'function') {
                return null;
            } else if (promise.status === 'fulfilled') {
                return null;
            } else {
                promise.then(function(value) {
                    var fulfilledThenable = promise;
                    fulfilledThenable.status = 'fulfilled';
                    fulfilledThenable.value = value;
                }, function(reason) {
                    var rejectedThenable = promise;
                    rejectedThenable.status = 'rejected';
                    rejectedThenable.reason = reason;
                });
                return promise;
            }
        }
        function ignoreReject() {}
        function preloadModule(metadata) {
            var chunks = metadata.chunks;
            var promises = [];
            for(var i = 0; i < chunks.length; i++){
                var chunkId = chunks[i];
                var entry = chunkCache.get(chunkId);
                if (entry === undefined) {
                    var thenable = globalThis.__next_chunk_load__(chunkId);
                    promises.push(thenable);
                    var resolve = chunkCache.set.bind(chunkCache, chunkId, null);
                    thenable.then(resolve, ignoreReject);
                    chunkCache.set(chunkId, thenable);
                } else if (entry !== null) {
                    promises.push(entry);
                }
            }
            if (metadata.async) {
                if (promises.length === 0) {
                    return requireAsyncModule(metadata.id);
                } else {
                    return Promise.all(promises).then(function() {
                        return requireAsyncModule(metadata.id);
                    });
                }
            } else if (promises.length > 0) {
                return Promise.all(promises);
            } else {
                return null;
            }
        }
        function requireModule(metadata) {
            var moduleExports = globalThis.__next_require__(metadata.id);
            if (metadata.async) {
                if (typeof moduleExports.then !== 'function') ;
                else if (moduleExports.status === 'fulfilled') {
                    moduleExports = moduleExports.value;
                } else {
                    throw moduleExports.reason;
                }
            }
            if (metadata.name === '*') {
                return moduleExports;
            }
            if (metadata.name === '') {
                return moduleExports.__esModule ? moduleExports.default : moduleExports;
            }
            return moduleExports[metadata.name];
        }
        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;
        function dispatchHint(code, model) {
            var dispatcher = ReactDOMCurrentDispatcher.current;
            if (dispatcher) {
                var href, options;
                if (typeof model === 'string') {
                    href = model;
                } else {
                    href = model[0];
                    options = model[1];
                }
                switch(code){
                    case 'D':
                        {
                            dispatcher.prefetchDNS(href, options);
                            return;
                        }
                    case 'C':
                        {
                            dispatcher.preconnect(href, options);
                            return;
                        }
                    case 'L':
                        {
                            dispatcher.preload(href, options);
                            return;
                        }
                    case 'I':
                        {
                            dispatcher.preinit(href, options);
                            return;
                        }
                }
            }
        }
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
            {
                {
                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                        args[_key2 - 1] = arguments[_key2];
                    }
                    printWarning('error', format, args);
                }
            }
        }
        function printWarning(level, format, args) {
            {
                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame.getStackAddendum();
                if (stack !== '') {
                    format += '%s';
                    args = args.concat([
                        stack
                    ]);
                }
                var argsWithFormat = args.map(function(item) {
                    return String(item);
                });
                argsWithFormat.unshift('Warning: ' + format);
                Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
        }
        var REACT_ELEMENT_TYPE = Symbol.for('react.element');
        var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
        var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
        var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
        var REACT_MEMO_TYPE = Symbol.for('react.memo');
        var REACT_LAZY_TYPE = Symbol.for('react.lazy');
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for('react.default_value');
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== 'object') {
                return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === 'function') {
                return maybeIterator;
            }
            return null;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
            return isArrayImpl(a);
        }
        var jsxPropsParents = new WeakMap();
        var jsxChildrenParents = new WeakMap();
        function isObjectPrototype(object) {
            if (!object) {
                return false;
            }
            var ObjectPrototype = Object.prototype;
            if (object === ObjectPrototype) {
                return true;
            }
            if (Object.getPrototypeOf(object)) {
                return false;
            }
            var names = Object.getOwnPropertyNames(object);
            for(var i = 0; i < names.length; i++){
                if (!(names[i] in ObjectPrototype)) {
                    return false;
                }
            }
            return true;
        }
        function isSimpleObject(object) {
            if (!isObjectPrototype(Object.getPrototypeOf(object))) {
                return false;
            }
            var names = Object.getOwnPropertyNames(object);
            for(var i = 0; i < names.length; i++){
                var descriptor = Object.getOwnPropertyDescriptor(object, names[i]);
                if (!descriptor) {
                    return false;
                }
                if (!descriptor.enumerable) {
                    if ((names[i] === 'key' || names[i] === 'ref') && typeof descriptor.get === 'function') {
                        continue;
                    }
                    return false;
                }
            }
            return true;
        }
        function objectName(object) {
            var name = Object.prototype.toString.call(object);
            return name.replace(/^\[object (.*)\]$/, function(m, p0) {
                return p0;
            });
        }
        function describeKeyForErrorMessage(key) {
            var encodedKey = JSON.stringify(key);
            return '"' + key + '"' === encodedKey ? key : encodedKey;
        }
        function describeValueForErrorMessage(value) {
            switch(typeof value){
                case 'string':
                    {
                        return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + '...');
                    }
                case 'object':
                    {
                        if (isArray(value)) {
                            return '[...]';
                        }
                        var name = objectName(value);
                        if (name === 'Object') {
                            return '{...}';
                        }
                        return name;
                    }
                case 'function':
                    return 'function';
                default:
                    return String(value);
            }
        }
        function describeElementType(type) {
            if (typeof type === 'string') {
                return type;
            }
            switch(type){
                case REACT_SUSPENSE_TYPE:
                    return 'Suspense';
                case REACT_SUSPENSE_LIST_TYPE:
                    return 'SuspenseList';
            }
            if (typeof type === 'object') {
                switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                        return describeElementType(type.render);
                    case REACT_MEMO_TYPE:
                        return describeElementType(type.type);
                    case REACT_LAZY_TYPE:
                        {
                            var lazyComponent = type;
                            var payload = lazyComponent._payload;
                            var init = lazyComponent._init;
                            try {
                                return describeElementType(init(payload));
                            } catch (x) {}
                        }
                }
            }
            return '';
        }
        function describeObjectForErrorMessage(objectOrArray, expandedName) {
            var objKind = objectName(objectOrArray);
            if (objKind !== 'Object' && objKind !== 'Array') {
                return objKind;
            }
            var str = '';
            var start = -1;
            var length = 0;
            if (isArray(objectOrArray)) {
                if (jsxChildrenParents.has(objectOrArray)) {
                    var type = jsxChildrenParents.get(objectOrArray);
                    str = '<' + describeElementType(type) + '>';
                    var array = objectOrArray;
                    for(var i = 0; i < array.length; i++){
                        var value = array[i];
                        var substr = void 0;
                        if (typeof value === 'string') {
                            substr = value;
                        } else if (typeof value === 'object' && value !== null) {
                            substr = '{' + describeObjectForErrorMessage(value) + '}';
                        } else {
                            substr = '{' + describeValueForErrorMessage(value) + '}';
                        }
                        if ('' + i === expandedName) {
                            start = str.length;
                            length = substr.length;
                            str += substr;
                        } else if (substr.length < 15 && str.length + substr.length < 40) {
                            str += substr;
                        } else {
                            str += '{...}';
                        }
                    }
                    str += '</' + describeElementType(type) + '>';
                } else {
                    str = '[';
                    var _array = objectOrArray;
                    for(var _i = 0; _i < _array.length; _i++){
                        if (_i > 0) {
                            str += ', ';
                        }
                        var _value = _array[_i];
                        var _substr = void 0;
                        if (typeof _value === 'object' && _value !== null) {
                            _substr = describeObjectForErrorMessage(_value);
                        } else {
                            _substr = describeValueForErrorMessage(_value);
                        }
                        if ('' + _i === expandedName) {
                            start = str.length;
                            length = _substr.length;
                            str += _substr;
                        } else if (_substr.length < 10 && str.length + _substr.length < 40) {
                            str += _substr;
                        } else {
                            str += '...';
                        }
                    }
                    str += ']';
                }
            } else {
                if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {
                    str = '<' + describeElementType(objectOrArray.type) + '/>';
                } else if (jsxPropsParents.has(objectOrArray)) {
                    var _type = jsxPropsParents.get(objectOrArray);
                    str = '<' + (describeElementType(_type) || '...');
                    var object = objectOrArray;
                    var names = Object.keys(object);
                    for(var _i2 = 0; _i2 < names.length; _i2++){
                        str += ' ';
                        var name = names[_i2];
                        str += describeKeyForErrorMessage(name) + '=';
                        var _value2 = object[name];
                        var _substr2 = void 0;
                        if (name === expandedName && typeof _value2 === 'object' && _value2 !== null) {
                            _substr2 = describeObjectForErrorMessage(_value2);
                        } else {
                            _substr2 = describeValueForErrorMessage(_value2);
                        }
                        if (typeof _value2 !== 'string') {
                            _substr2 = '{' + _substr2 + '}';
                        }
                        if (name === expandedName) {
                            start = str.length;
                            length = _substr2.length;
                            str += _substr2;
                        } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {
                            str += _substr2;
                        } else {
                            str += '...';
                        }
                    }
                    str += '>';
                } else {
                    str = '{';
                    var _object = objectOrArray;
                    var _names = Object.keys(_object);
                    for(var _i3 = 0; _i3 < _names.length; _i3++){
                        if (_i3 > 0) {
                            str += ', ';
                        }
                        var _name = _names[_i3];
                        str += describeKeyForErrorMessage(_name) + ': ';
                        var _value3 = _object[_name];
                        var _substr3 = void 0;
                        if (typeof _value3 === 'object' && _value3 !== null) {
                            _substr3 = describeObjectForErrorMessage(_value3);
                        } else {
                            _substr3 = describeValueForErrorMessage(_value3);
                        }
                        if (_name === expandedName) {
                            start = str.length;
                            length = _substr3.length;
                            str += _substr3;
                        } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {
                            str += _substr3;
                        } else {
                            str += '...';
                        }
                    }
                    str += '}';
                }
            }
            if (expandedName === undefined) {
                return str;
            }
            if (start > -1 && length > 0) {
                var highlight = ' '.repeat(start) + '^'.repeat(length);
                return '\n  ' + str + '\n  ' + highlight;
            }
            return '\n  ' + str;
        }
        var knownServerReferences = new WeakMap();
        function serializePromiseID(id) {
            return '$@' + id.toString(16);
        }
        function serializeServerReferenceID(id) {
            return '$F' + id.toString(16);
        }
        function serializeSymbolReference(name) {
            return '$S' + name;
        }
        function serializeFormDataReference(id) {
            return '$K' + id.toString(16);
        }
        function serializeNumber(number) {
            if (Number.isFinite(number)) {
                if (number === 0 && 1 / number === -Infinity) {
                    return '$-0';
                } else {
                    return number;
                }
            } else {
                if (number === Infinity) {
                    return '$Infinity';
                } else if (number === -Infinity) {
                    return '$-Infinity';
                } else {
                    return '$NaN';
                }
            }
        }
        function serializeUndefined() {
            return '$undefined';
        }
        function serializeDateFromDateJSON(dateJSON) {
            return '$D' + dateJSON;
        }
        function serializeBigInt(n) {
            return '$n' + n.toString(10);
        }
        function serializeMapID(id) {
            return '$Q' + id.toString(16);
        }
        function serializeSetID(id) {
            return '$W' + id.toString(16);
        }
        function escapeStringValue(value) {
            if (value[0] === '$') {
                return '$' + value;
            } else {
                return value;
            }
        }
        function processReply(root, formFieldPrefix, resolve, reject) {
            var nextPartId = 1;
            var pendingParts = 0;
            var formData = null;
            function resolveToJSON(key, value) {
                var parent = this;
                {
                    var originalValue = parent[key];
                    if (typeof originalValue === 'object' && originalValue !== value && !(originalValue instanceof Date)) {
                        if (objectName(originalValue) !== 'Object') {
                            error('Only plain objects can be passed to Server Functions from the Client. ' + '%s objects are not supported.%s', objectName(originalValue), describeObjectForErrorMessage(parent, key));
                        } else {
                            error('Only plain objects can be passed to Server Functions from the Client. ' + 'Objects with toJSON methods are not supported. Convert it manually ' + 'to a simple value before passing it to props.%s', describeObjectForErrorMessage(parent, key));
                        }
                    }
                }
                if (value === null) {
                    return null;
                }
                if (typeof value === 'object') {
                    if (typeof value.then === 'function') {
                        if (formData === null) {
                            formData = new FormData();
                        }
                        pendingParts++;
                        var promiseId = nextPartId++;
                        var thenable = value;
                        thenable.then(function(partValue) {
                            var partJSON = JSON.stringify(partValue, resolveToJSON);
                            var data = formData;
                            data.append(formFieldPrefix + promiseId, partJSON);
                            pendingParts--;
                            if (pendingParts === 0) {
                                resolve(data);
                            }
                        }, function(reason) {
                            reject(reason);
                        });
                        return serializePromiseID(promiseId);
                    }
                    if (value instanceof FormData) {
                        if (formData === null) {
                            formData = new FormData();
                        }
                        var data = formData;
                        var refId = nextPartId++;
                        var prefix = formFieldPrefix + refId + '_';
                        value.forEach(function(originalValue, originalKey) {
                            data.append(prefix + originalKey, originalValue);
                        });
                        return serializeFormDataReference(refId);
                    }
                    if (value instanceof Map) {
                        var partJSON = JSON.stringify(Array.from(value), resolveToJSON);
                        if (formData === null) {
                            formData = new FormData();
                        }
                        var mapId = nextPartId++;
                        formData.append(formFieldPrefix + mapId, partJSON);
                        return serializeMapID(mapId);
                    }
                    if (value instanceof Set) {
                        var _partJSON = JSON.stringify(Array.from(value), resolveToJSON);
                        if (formData === null) {
                            formData = new FormData();
                        }
                        var setId = nextPartId++;
                        formData.append(formFieldPrefix + setId, _partJSON);
                        return serializeSetID(setId);
                    }
                    if (!isArray(value)) {
                        var iteratorFn = getIteratorFn(value);
                        if (iteratorFn) {
                            return Array.from(value);
                        }
                    }
                    {
                        if (value !== null && !isArray(value)) {
                            if (value.$$typeof === REACT_ELEMENT_TYPE) {
                                error('React Element cannot be passed to Server Functions from the Client.%s', describeObjectForErrorMessage(parent, key));
                            } else if (value.$$typeof === REACT_LAZY_TYPE) {
                                error('React Lazy cannot be passed to Server Functions from the Client.%s', describeObjectForErrorMessage(parent, key));
                            } else if (value.$$typeof === REACT_PROVIDER_TYPE) {
                                error('React Context Providers cannot be passed to Server Functions from the Client.%s', describeObjectForErrorMessage(parent, key));
                            } else if (objectName(value) !== 'Object') {
                                error('Only plain objects can be passed to Client Components from Server Components. ' + '%s objects are not supported.%s', objectName(value), describeObjectForErrorMessage(parent, key));
                            } else if (!isSimpleObject(value)) {
                                error('Only plain objects can be passed to Client Components from Server Components. ' + 'Classes or other objects with methods are not supported.%s', describeObjectForErrorMessage(parent, key));
                            } else if (Object.getOwnPropertySymbols) {
                                var symbols = Object.getOwnPropertySymbols(value);
                                if (symbols.length > 0) {
                                    error('Only plain objects can be passed to Client Components from Server Components. ' + 'Objects with symbol properties like %s are not supported.%s', symbols[0].description, describeObjectForErrorMessage(parent, key));
                                }
                            }
                        }
                    }
                    return value;
                }
                if (typeof value === 'string') {
                    if (value[value.length - 1] === 'Z') {
                        var _originalValue = parent[key];
                        if (_originalValue instanceof Date) {
                            return serializeDateFromDateJSON(value);
                        }
                    }
                    return escapeStringValue(value);
                }
                if (typeof value === 'boolean') {
                    return value;
                }
                if (typeof value === 'number') {
                    return serializeNumber(value);
                }
                if (typeof value === 'undefined') {
                    return serializeUndefined();
                }
                if (typeof value === 'function') {
                    var metaData = knownServerReferences.get(value);
                    if (metaData !== undefined) {
                        var metaDataJSON = JSON.stringify(metaData, resolveToJSON);
                        if (formData === null) {
                            formData = new FormData();
                        }
                        var _refId = nextPartId++;
                        formData.set(formFieldPrefix + _refId, metaDataJSON);
                        return serializeServerReferenceID(_refId);
                    }
                    throw new Error('Client Functions cannot be passed directly to Server Functions. ' + 'Only Functions passed from the Server can be passed back again.');
                }
                if (typeof value === 'symbol') {
                    var name = value.description;
                    if (Symbol.for(name) !== value) {
                        throw new Error('Only global symbols received from Symbol.for(...) can be passed to Server Functions. ' + ("The symbol Symbol.for(" + value.description + ") cannot be found among global symbols."));
                    }
                    return serializeSymbolReference(name);
                }
                if (typeof value === 'bigint') {
                    return serializeBigInt(value);
                }
                throw new Error("Type " + typeof value + " is not supported as an argument to a Server Function.");
            }
            var json = JSON.stringify(root, resolveToJSON);
            if (formData === null) {
                resolve(json);
            } else {
                formData.set(formFieldPrefix + '0', json);
                if (pendingParts === 0) {
                    resolve(formData);
                }
            }
        }
        function createServerReference(id, callServer) {
            var proxy = function() {
                var args = Array.prototype.slice.call(arguments);
                return callServer(id, args);
            };
            knownServerReferences.set(proxy, {
                id: id,
                bound: null
            });
            return proxy;
        }
        var ContextRegistry = ReactSharedInternals.ContextRegistry;
        function getOrCreateServerContext(globalName) {
            if (!ContextRegistry[globalName]) {
                ContextRegistry[globalName] = React.createServerContext(globalName, REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED);
            }
            return ContextRegistry[globalName];
        }
        var ROW_ID = 0;
        var ROW_TAG = 1;
        var ROW_LENGTH = 2;
        var ROW_CHUNK_BY_NEWLINE = 3;
        var ROW_CHUNK_BY_LENGTH = 4;
        var PENDING = 'pending';
        var BLOCKED = 'blocked';
        var RESOLVED_MODEL = 'resolved_model';
        var RESOLVED_MODULE = 'resolved_module';
        var INITIALIZED = 'fulfilled';
        var ERRORED = 'rejected';
        function Chunk(status, value, reason, response) {
            this.status = status;
            this.value = value;
            this.reason = reason;
            this._response = response;
        }
        Chunk.prototype = Object.create(Promise.prototype);
        Chunk.prototype.then = function(resolve, reject) {
            var chunk = this;
            switch(chunk.status){
                case RESOLVED_MODEL:
                    initializeModelChunk(chunk);
                    break;
                case RESOLVED_MODULE:
                    initializeModuleChunk(chunk);
                    break;
            }
            switch(chunk.status){
                case INITIALIZED:
                    resolve(chunk.value);
                    break;
                case PENDING:
                case BLOCKED:
                    if (resolve) {
                        if (chunk.value === null) {
                            chunk.value = [];
                        }
                        chunk.value.push(resolve);
                    }
                    if (reject) {
                        if (chunk.reason === null) {
                            chunk.reason = [];
                        }
                        chunk.reason.push(reject);
                    }
                    break;
                default:
                    reject(chunk.reason);
                    break;
            }
        };
        function readChunk(chunk) {
            switch(chunk.status){
                case RESOLVED_MODEL:
                    initializeModelChunk(chunk);
                    break;
                case RESOLVED_MODULE:
                    initializeModuleChunk(chunk);
                    break;
            }
            switch(chunk.status){
                case INITIALIZED:
                    return chunk.value;
                case PENDING:
                case BLOCKED:
                    throw chunk;
                default:
                    throw chunk.reason;
            }
        }
        function getRoot(response) {
            var chunk = getChunk(response, 0);
            return chunk;
        }
        function createPendingChunk(response) {
            return new Chunk(PENDING, null, null, response);
        }
        function createBlockedChunk(response) {
            return new Chunk(BLOCKED, null, null, response);
        }
        function createErrorChunk(response, error) {
            return new Chunk(ERRORED, null, error, response);
        }
        function wakeChunk(listeners, value) {
            for(var i = 0; i < listeners.length; i++){
                var listener = listeners[i];
                listener(value);
            }
        }
        function wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners) {
            switch(chunk.status){
                case INITIALIZED:
                    wakeChunk(resolveListeners, chunk.value);
                    break;
                case PENDING:
                case BLOCKED:
                    chunk.value = resolveListeners;
                    chunk.reason = rejectListeners;
                    break;
                case ERRORED:
                    if (rejectListeners) {
                        wakeChunk(rejectListeners, chunk.reason);
                    }
                    break;
            }
        }
        function triggerErrorOnChunk(chunk, error) {
            if (chunk.status !== PENDING && chunk.status !== BLOCKED) {
                return;
            }
            var listeners = chunk.reason;
            var erroredChunk = chunk;
            erroredChunk.status = ERRORED;
            erroredChunk.reason = error;
            if (listeners !== null) {
                wakeChunk(listeners, error);
            }
        }
        function createResolvedModelChunk(response, value) {
            return new Chunk(RESOLVED_MODEL, value, null, response);
        }
        function createResolvedModuleChunk(response, value) {
            return new Chunk(RESOLVED_MODULE, value, null, response);
        }
        function createInitializedTextChunk(response, value) {
            return new Chunk(INITIALIZED, value, null, response);
        }
        function resolveModelChunk(chunk, value) {
            if (chunk.status !== PENDING) {
                return;
            }
            var resolveListeners = chunk.value;
            var rejectListeners = chunk.reason;
            var resolvedChunk = chunk;
            resolvedChunk.status = RESOLVED_MODEL;
            resolvedChunk.value = value;
            if (resolveListeners !== null) {
                initializeModelChunk(resolvedChunk);
                wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);
            }
        }
        function resolveModuleChunk(chunk, value) {
            if (chunk.status !== PENDING && chunk.status !== BLOCKED) {
                return;
            }
            var resolveListeners = chunk.value;
            var rejectListeners = chunk.reason;
            var resolvedChunk = chunk;
            resolvedChunk.status = RESOLVED_MODULE;
            resolvedChunk.value = value;
            if (resolveListeners !== null) {
                initializeModuleChunk(resolvedChunk);
                wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);
            }
        }
        var initializingChunk = null;
        var initializingChunkBlockedModel = null;
        function initializeModelChunk(chunk) {
            var prevChunk = initializingChunk;
            var prevBlocked = initializingChunkBlockedModel;
            initializingChunk = chunk;
            initializingChunkBlockedModel = null;
            try {
                var value = parseModel(chunk._response, chunk.value);
                if (initializingChunkBlockedModel !== null && initializingChunkBlockedModel.deps > 0) {
                    initializingChunkBlockedModel.value = value;
                    var blockedChunk = chunk;
                    blockedChunk.status = BLOCKED;
                    blockedChunk.value = null;
                    blockedChunk.reason = null;
                } else {
                    var initializedChunk = chunk;
                    initializedChunk.status = INITIALIZED;
                    initializedChunk.value = value;
                }
            } catch (error) {
                var erroredChunk = chunk;
                erroredChunk.status = ERRORED;
                erroredChunk.reason = error;
            } finally{
                initializingChunk = prevChunk;
                initializingChunkBlockedModel = prevBlocked;
            }
        }
        function initializeModuleChunk(chunk) {
            try {
                var value = requireModule(chunk.value);
                var initializedChunk = chunk;
                initializedChunk.status = INITIALIZED;
                initializedChunk.value = value;
            } catch (error) {
                var erroredChunk = chunk;
                erroredChunk.status = ERRORED;
                erroredChunk.reason = error;
            }
        }
        function reportGlobalError(response, error) {
            response._chunks.forEach(function(chunk) {
                if (chunk.status === PENDING) {
                    triggerErrorOnChunk(chunk, error);
                }
            });
        }
        function createElement(type, key, props) {
            var element = {
                $$typeof: REACT_ELEMENT_TYPE,
                type: type,
                key: key,
                ref: null,
                props: props,
                _owner: null
            };
            {
                element._store = {};
                Object.defineProperty(element._store, 'validated', {
                    configurable: false,
                    enumerable: false,
                    writable: true,
                    value: true
                });
                Object.defineProperty(element, '_self', {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: null
                });
                Object.defineProperty(element, '_source', {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: null
                });
            }
            return element;
        }
        function createLazyChunkWrapper(chunk) {
            var lazyType = {
                $$typeof: REACT_LAZY_TYPE,
                _payload: chunk,
                _init: readChunk
            };
            return lazyType;
        }
        function getChunk(response, id) {
            var chunks = response._chunks;
            var chunk = chunks.get(id);
            if (!chunk) {
                chunk = createPendingChunk(response);
                chunks.set(id, chunk);
            }
            return chunk;
        }
        function createModelResolver(chunk, parentObject, key) {
            var blocked;
            if (initializingChunkBlockedModel) {
                blocked = initializingChunkBlockedModel;
                blocked.deps++;
            } else {
                blocked = initializingChunkBlockedModel = {
                    deps: 1,
                    value: null
                };
            }
            return function(value) {
                parentObject[key] = value;
                blocked.deps--;
                if (blocked.deps === 0) {
                    if (chunk.status !== BLOCKED) {
                        return;
                    }
                    var resolveListeners = chunk.value;
                    var initializedChunk = chunk;
                    initializedChunk.status = INITIALIZED;
                    initializedChunk.value = blocked.value;
                    if (resolveListeners !== null) {
                        wakeChunk(resolveListeners, blocked.value);
                    }
                }
            };
        }
        function createModelReject(chunk) {
            return function(error) {
                return triggerErrorOnChunk(chunk, error);
            };
        }
        function createServerReferenceProxy(response, metaData) {
            var callServer = response._callServer;
            var proxy = function() {
                var args = Array.prototype.slice.call(arguments);
                var p = metaData.bound;
                if (!p) {
                    return callServer(metaData.id, args);
                }
                if (p.status === INITIALIZED) {
                    var bound = p.value;
                    return callServer(metaData.id, bound.concat(args));
                }
                return Promise.resolve(p).then(function(bound) {
                    return callServer(metaData.id, bound.concat(args));
                });
            };
            knownServerReferences.set(proxy, metaData);
            return proxy;
        }
        function getOutlinedModel(response, id) {
            var chunk = getChunk(response, id);
            switch(chunk.status){
                case RESOLVED_MODEL:
                    initializeModelChunk(chunk);
                    break;
            }
            switch(chunk.status){
                case INITIALIZED:
                    {
                        return chunk.value;
                    }
                default:
                    throw chunk.reason;
            }
        }
        function parseModelString(response, parentObject, key, value) {
            if (value[0] === '$') {
                if (value === '$') {
                    return REACT_ELEMENT_TYPE;
                }
                switch(value[1]){
                    case '$':
                        {
                            return value.slice(1);
                        }
                    case 'L':
                        {
                            var id = parseInt(value.slice(2), 16);
                            var chunk = getChunk(response, id);
                            return createLazyChunkWrapper(chunk);
                        }
                    case '@':
                        {
                            var _id = parseInt(value.slice(2), 16);
                            var _chunk = getChunk(response, _id);
                            return _chunk;
                        }
                    case 'S':
                        {
                            return Symbol.for(value.slice(2));
                        }
                    case 'P':
                        {
                            return getOrCreateServerContext(value.slice(2)).Provider;
                        }
                    case 'F':
                        {
                            var _id2 = parseInt(value.slice(2), 16);
                            var metadata = getOutlinedModel(response, _id2);
                            return createServerReferenceProxy(response, metadata);
                        }
                    case 'Q':
                        {
                            var _id3 = parseInt(value.slice(2), 16);
                            var data = getOutlinedModel(response, _id3);
                            return new Map(data);
                        }
                    case 'W':
                        {
                            var _id4 = parseInt(value.slice(2), 16);
                            var _data = getOutlinedModel(response, _id4);
                            return new Set(_data);
                        }
                    case 'I':
                        {
                            return Infinity;
                        }
                    case '-':
                        {
                            if (value === '$-0') {
                                return -0;
                            } else {
                                return -Infinity;
                            }
                        }
                    case 'N':
                        {
                            return NaN;
                        }
                    case 'u':
                        {
                            return undefined;
                        }
                    case 'D':
                        {
                            return new Date(Date.parse(value.slice(2)));
                        }
                    case 'n':
                        {
                            return BigInt(value.slice(2));
                        }
                    default:
                        {
                            var _id5 = parseInt(value.slice(1), 16);
                            var _chunk2 = getChunk(response, _id5);
                            switch(_chunk2.status){
                                case RESOLVED_MODEL:
                                    initializeModelChunk(_chunk2);
                                    break;
                                case RESOLVED_MODULE:
                                    initializeModuleChunk(_chunk2);
                                    break;
                            }
                            switch(_chunk2.status){
                                case INITIALIZED:
                                    return _chunk2.value;
                                case PENDING:
                                case BLOCKED:
                                    var parentChunk = initializingChunk;
                                    _chunk2.then(createModelResolver(parentChunk, parentObject, key), createModelReject(parentChunk));
                                    return null;
                                default:
                                    throw _chunk2.reason;
                            }
                        }
                }
            }
            return value;
        }
        function parseModelTuple(response, value) {
            var tuple = value;
            if (tuple[0] === REACT_ELEMENT_TYPE) {
                return createElement(tuple[1], tuple[2], tuple[3]);
            }
            return value;
        }
        function missingCall() {
            throw new Error('Trying to call a function from "use server" but the callServer option ' + 'was not implemented in your router runtime.');
        }
        function createResponse(bundlerConfig, callServer) {
            var chunks = new Map();
            var response = {
                _bundlerConfig: bundlerConfig,
                _callServer: callServer !== undefined ? callServer : missingCall,
                _chunks: chunks,
                _stringDecoder: createStringDecoder(),
                _fromJSON: null,
                _rowState: 0,
                _rowID: 0,
                _rowTag: 0,
                _rowLength: 0,
                _buffer: []
            };
            response._fromJSON = createFromJSONCallback(response);
            return response;
        }
        function resolveModel(response, id, model) {
            var chunks = response._chunks;
            var chunk = chunks.get(id);
            if (!chunk) {
                chunks.set(id, createResolvedModelChunk(response, model));
            } else {
                resolveModelChunk(chunk, model);
            }
        }
        function resolveText(response, id, text) {
            var chunks = response._chunks;
            chunks.set(id, createInitializedTextChunk(response, text));
        }
        function resolveModule(response, id, model) {
            var chunks = response._chunks;
            var chunk = chunks.get(id);
            var clientReferenceMetadata = parseModel(response, model);
            var clientReference = resolveClientReference(response._bundlerConfig, clientReferenceMetadata);
            var promise = preloadModule(clientReference);
            if (promise) {
                var blockedChunk;
                if (!chunk) {
                    blockedChunk = createBlockedChunk(response);
                    chunks.set(id, blockedChunk);
                } else {
                    blockedChunk = chunk;
                    blockedChunk.status = BLOCKED;
                }
                promise.then(function() {
                    return resolveModuleChunk(blockedChunk, clientReference);
                }, function(error) {
                    return triggerErrorOnChunk(blockedChunk, error);
                });
            } else {
                if (!chunk) {
                    chunks.set(id, createResolvedModuleChunk(response, clientReference));
                } else {
                    resolveModuleChunk(chunk, clientReference);
                }
            }
        }
        function resolveErrorDev(response, id, digest, message, stack) {
            var error = new Error(message || 'An error occurred in the Server Components render but no message was provided');
            error.stack = stack;
            error.digest = digest;
            var errorWithDigest = error;
            var chunks = response._chunks;
            var chunk = chunks.get(id);
            if (!chunk) {
                chunks.set(id, createErrorChunk(response, errorWithDigest));
            } else {
                triggerErrorOnChunk(chunk, errorWithDigest);
            }
        }
        function resolveHint(response, code, model) {
            var hintModel = parseModel(response, model);
            dispatchHint(code, hintModel);
        }
        function processFullRow(response, id, tag, buffer, chunk) {
            var stringDecoder = response._stringDecoder;
            var row = '';
            for(var i = 0; i < buffer.length; i++){
                row += readPartialStringChunk(stringDecoder, buffer[i]);
            }
            row += readFinalStringChunk(stringDecoder, chunk);
            switch(tag){
                case 73:
                    {
                        resolveModule(response, id, row);
                        return;
                    }
                case 72:
                    {
                        var code = row[0];
                        resolveHint(response, code, row.slice(1));
                        return;
                    }
                case 69:
                    {
                        var errorInfo = JSON.parse(row);
                        {
                            resolveErrorDev(response, id, errorInfo.digest, errorInfo.message, errorInfo.stack);
                        }
                        return;
                    }
                case 84:
                    {
                        resolveText(response, id, row);
                        return;
                    }
                default:
                    {
                        resolveModel(response, id, row);
                        return;
                    }
            }
        }
        function processBinaryChunk(response, chunk) {
            var i = 0;
            var rowState = response._rowState;
            var rowID = response._rowID;
            var rowTag = response._rowTag;
            var rowLength = response._rowLength;
            var buffer = response._buffer;
            var chunkLength = chunk.length;
            while(i < chunkLength){
                var lastIdx = -1;
                switch(rowState){
                    case ROW_ID:
                        {
                            var byte = chunk[i++];
                            if (byte === 58) {
                                rowState = ROW_TAG;
                            } else {
                                rowID = rowID << 4 | (byte > 96 ? byte - 87 : byte - 48);
                            }
                            continue;
                        }
                    case ROW_TAG:
                        {
                            var resolvedRowTag = chunk[i];
                            if (resolvedRowTag === 84 || enableBinaryFlight) {
                                rowTag = resolvedRowTag;
                                rowState = ROW_LENGTH;
                                i++;
                            } else if (resolvedRowTag > 64 && resolvedRowTag < 91) {
                                rowTag = resolvedRowTag;
                                rowState = ROW_CHUNK_BY_NEWLINE;
                                i++;
                            } else {
                                rowTag = 0;
                                rowState = ROW_CHUNK_BY_NEWLINE;
                            }
                            continue;
                        }
                    case ROW_LENGTH:
                        {
                            var _byte = chunk[i++];
                            if (_byte === 44) {
                                rowState = ROW_CHUNK_BY_LENGTH;
                            } else {
                                rowLength = rowLength << 4 | (_byte > 96 ? _byte - 87 : _byte - 48);
                            }
                            continue;
                        }
                    case ROW_CHUNK_BY_NEWLINE:
                        {
                            lastIdx = chunk.indexOf(10, i);
                            break;
                        }
                    case ROW_CHUNK_BY_LENGTH:
                        {
                            lastIdx = i + rowLength;
                            if (lastIdx > chunk.length) {
                                lastIdx = -1;
                            }
                            break;
                        }
                }
                var offset = chunk.byteOffset + i;
                if (lastIdx > -1) {
                    var length = lastIdx - i;
                    var lastChunk = new Uint8Array(chunk.buffer, offset, length);
                    processFullRow(response, rowID, rowTag, buffer, lastChunk);
                    i = lastIdx;
                    if (rowState === ROW_CHUNK_BY_NEWLINE) {
                        i++;
                    }
                    rowState = ROW_ID;
                    rowTag = 0;
                    rowID = 0;
                    rowLength = 0;
                    buffer.length = 0;
                } else {
                    var _length = chunk.byteLength - i;
                    var remainingSlice = new Uint8Array(chunk.buffer, offset, _length);
                    buffer.push(remainingSlice);
                    rowLength -= remainingSlice.byteLength;
                    break;
                }
            }
            response._rowState = rowState;
            response._rowID = rowID;
            response._rowTag = rowTag;
            response._rowLength = rowLength;
        }
        function parseModel(response, json) {
            return JSON.parse(json, response._fromJSON);
        }
        function createFromJSONCallback(response) {
            return function(key, value) {
                if (typeof value === 'string') {
                    return parseModelString(response, this, key, value);
                }
                if (typeof value === 'object' && value !== null) {
                    return parseModelTuple(response, value);
                }
                return value;
            };
        }
        function close(response) {
            reportGlobalError(response, new Error('Connection closed.'));
        }
        function createResponseFromOptions(options) {
            return createResponse(null, options && options.callServer ? options.callServer : undefined);
        }
        function startReadingFromStream(response, stream) {
            var reader = stream.getReader();
            function progress(_ref) {
                var done = _ref.done, value = _ref.value;
                if (done) {
                    close(response);
                    return;
                }
                var buffer = value;
                processBinaryChunk(response, buffer);
                return reader.read().then(progress).catch(error);
            }
            function error(e) {
                reportGlobalError(response, e);
            }
            reader.read().then(progress).catch(error);
        }
        function createFromReadableStream(stream, options) {
            var response = createResponseFromOptions(options);
            startReadingFromStream(response, stream);
            return getRoot(response);
        }
        function createFromFetch(promiseForResponse, options) {
            var response = createResponseFromOptions(options);
            promiseForResponse.then(function(r) {
                startReadingFromStream(response, r.body);
            }, function(e) {
                reportGlobalError(response, e);
            });
            return getRoot(response);
        }
        function encodeReply(value) {
            return new Promise(function(resolve, reject) {
                processReply(value, '', resolve, reject);
            });
        }
        exports.createFromFetch = createFromFetch;
        exports.createFromReadableStream = createFromReadableStream;
        exports.createServerReference = createServerReference;
        exports.encodeReply = encodeReply;
    })();
}

}.call(this) }),
"[project]/node_modules/next/dist/compiled/react-server-dom-webpack/client.browser.js (ecmascript, ssr)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, k: __turbopack_refresh__, m: module, e: exports }) { !function() {

'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_require__("[project]/node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js (ecmascript, ssr)");
}

}.call(this) }),
"[project]/node_modules/next/dist/compiled/react-server-dom-webpack/client.js (ecmascript, ssr)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, k: __turbopack_refresh__, m: module, e: exports }) { !function() {

'use strict';
module.exports = __turbopack_require__("[project]/node_modules/next/dist/compiled/react-server-dom-webpack/client.browser.js (ecmascript, ssr)");

}.call(this) }),
}]);

//# sourceMappingURL=node_modules_next_dist_compiled_react-server-dom-webpack_4fc5da._.js.map